/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar isPromise = __webpack_require__(1);\r\n\r\nfunction registerPromiseWorker(callback) {\r\n\r\n  function postOutgoingMessage(e, messageId, error, result) {\r\n    function postMessage(msg, transferList) {\r\n      /* istanbul ignore if */\r\n      if (typeof self.postMessage !== 'function') { // service worker\r\n        e.ports[0].postMessage(msg, transferList);\r\n      } else { // web worker\r\n        self.postMessage(msg, transferList);\r\n      }\r\n    }\r\n    if (error) {\r\n      /* istanbul ignore else */\r\n      if (typeof console !== 'undefined' && 'error' in console) {\r\n        // This is to make errors easier to debug. I think it's important\r\n        // enough to just leave here without giving the user an option\r\n        // to silence it.\r\n        console.error('Worker caught an error:', error);\r\n      }\r\n      postMessage([messageId, {\r\n        message: error.message\r\n      }]);\r\n    } else {\r\n      if (result instanceof MessageWithTransferList) {\r\n        postMessage([messageId, null, result.message], result.transferList);\r\n      } else {\r\n        postMessage([messageId, null, result]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function tryCatchFunc(callback, message) {\r\n    try {\r\n      return {res: callback(message, withTransferList)};\r\n    } catch (e) {\r\n      return {err: e};\r\n    }\r\n  }\r\n\r\n  function withTransferList(resMessage, transferList) {\r\n    return new MessageWithTransferList(resMessage, transferList);\r\n  } \r\n\r\n  function handleIncomingMessage(e, callback, messageId, message) {\r\n\r\n    var result = tryCatchFunc(callback, message);\r\n\r\n    if (result.err) {\r\n      postOutgoingMessage(e, messageId, result.err);\r\n    } else if (!isPromise(result.res)) {\r\n        postOutgoingMessage(e, messageId, null, result.res);\r\n    } else {\r\n      result.res.then(function (finalResult) {\r\n        postOutgoingMessage(e, messageId, null, finalResult);\r\n      }, function (finalError) {\r\n        postOutgoingMessage(e, messageId, finalError);\r\n      });\r\n    }\r\n  }\r\n\r\n  function onIncomingMessage(e) {\r\n    var payload = e.data;\r\n    if (!Array.isArray(payload) || payload.length !== 2) {\r\n      // message doens't match communication format; ignore\r\n      return;\r\n    }\r\n    var messageId = payload[0];\r\n    var message = payload[1];\r\n\r\n    if (typeof callback !== 'function') {\r\n      postOutgoingMessage(e, messageId, new Error(\r\n        'Please pass a function into register().'));\r\n    } else {\r\n      handleIncomingMessage(e, callback, messageId, message);\r\n    }\r\n  }\r\n\r\n  function MessageWithTransferList(message, transferList) {\r\n    this.message = message;\r\n    this.transferList = transferList;\r\n  }\r\n\r\n  self.addEventListener('message', onIncomingMessage);\r\n}\r\n\r\nmodule.exports = registerPromiseWorker;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Byb21pc2Utd29ya2VyLXRyYW5zZmVyYWJsZS9yZWdpc3Rlci5qcz8yN2RjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBLE9BQU8sT0FBTztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsS0FBSztBQUNMLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBpc1Byb21pc2UgPSByZXF1aXJlKCdpcy1wcm9taXNlJyk7XHJcblxyXG5mdW5jdGlvbiByZWdpc3RlclByb21pc2VXb3JrZXIoY2FsbGJhY2spIHtcclxuXHJcbiAgZnVuY3Rpb24gcG9zdE91dGdvaW5nTWVzc2FnZShlLCBtZXNzYWdlSWQsIGVycm9yLCByZXN1bHQpIHtcclxuICAgIGZ1bmN0aW9uIHBvc3RNZXNzYWdlKG1zZywgdHJhbnNmZXJMaXN0KSB7XHJcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICBpZiAodHlwZW9mIHNlbGYucG9zdE1lc3NhZ2UgIT09ICdmdW5jdGlvbicpIHsgLy8gc2VydmljZSB3b3JrZXJcclxuICAgICAgICBlLnBvcnRzWzBdLnBvc3RNZXNzYWdlKG1zZywgdHJhbnNmZXJMaXN0KTtcclxuICAgICAgfSBlbHNlIHsgLy8gd2ViIHdvcmtlclxyXG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2UobXNnLCB0cmFuc2Zlckxpc3QpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiAnZXJyb3InIGluIGNvbnNvbGUpIHtcclxuICAgICAgICAvLyBUaGlzIGlzIHRvIG1ha2UgZXJyb3JzIGVhc2llciB0byBkZWJ1Zy4gSSB0aGluayBpdCdzIGltcG9ydGFudFxyXG4gICAgICAgIC8vIGVub3VnaCB0byBqdXN0IGxlYXZlIGhlcmUgd2l0aG91dCBnaXZpbmcgdGhlIHVzZXIgYW4gb3B0aW9uXHJcbiAgICAgICAgLy8gdG8gc2lsZW5jZSBpdC5cclxuICAgICAgICBjb25zb2xlLmVycm9yKCdXb3JrZXIgY2F1Z2h0IGFuIGVycm9yOicsIGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgICBwb3N0TWVzc2FnZShbbWVzc2FnZUlkLCB7XHJcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxyXG4gICAgICB9XSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTWVzc2FnZVdpdGhUcmFuc2Zlckxpc3QpIHtcclxuICAgICAgICBwb3N0TWVzc2FnZShbbWVzc2FnZUlkLCBudWxsLCByZXN1bHQubWVzc2FnZV0sIHJlc3VsdC50cmFuc2Zlckxpc3QpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBvc3RNZXNzYWdlKFttZXNzYWdlSWQsIG51bGwsIHJlc3VsdF0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0cnlDYXRjaEZ1bmMoY2FsbGJhY2ssIG1lc3NhZ2UpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiB7cmVzOiBjYWxsYmFjayhtZXNzYWdlLCB3aXRoVHJhbnNmZXJMaXN0KX07XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHJldHVybiB7ZXJyOiBlfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHdpdGhUcmFuc2Zlckxpc3QocmVzTWVzc2FnZSwgdHJhbnNmZXJMaXN0KSB7XHJcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2VXaXRoVHJhbnNmZXJMaXN0KHJlc01lc3NhZ2UsIHRyYW5zZmVyTGlzdCk7XHJcbiAgfSBcclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlSW5jb21pbmdNZXNzYWdlKGUsIGNhbGxiYWNrLCBtZXNzYWdlSWQsIG1lc3NhZ2UpIHtcclxuXHJcbiAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2hGdW5jKGNhbGxiYWNrLCBtZXNzYWdlKTtcclxuXHJcbiAgICBpZiAocmVzdWx0LmVycikge1xyXG4gICAgICBwb3N0T3V0Z29pbmdNZXNzYWdlKGUsIG1lc3NhZ2VJZCwgcmVzdWx0LmVycik7XHJcbiAgICB9IGVsc2UgaWYgKCFpc1Byb21pc2UocmVzdWx0LnJlcykpIHtcclxuICAgICAgICBwb3N0T3V0Z29pbmdNZXNzYWdlKGUsIG1lc3NhZ2VJZCwgbnVsbCwgcmVzdWx0LnJlcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXN1bHQucmVzLnRoZW4oZnVuY3Rpb24gKGZpbmFsUmVzdWx0KSB7XHJcbiAgICAgICAgcG9zdE91dGdvaW5nTWVzc2FnZShlLCBtZXNzYWdlSWQsIG51bGwsIGZpbmFsUmVzdWx0KTtcclxuICAgICAgfSwgZnVuY3Rpb24gKGZpbmFsRXJyb3IpIHtcclxuICAgICAgICBwb3N0T3V0Z29pbmdNZXNzYWdlKGUsIG1lc3NhZ2VJZCwgZmluYWxFcnJvcik7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gb25JbmNvbWluZ01lc3NhZ2UoZSkge1xyXG4gICAgdmFyIHBheWxvYWQgPSBlLmRhdGE7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocGF5bG9hZCkgfHwgcGF5bG9hZC5sZW5ndGggIT09IDIpIHtcclxuICAgICAgLy8gbWVzc2FnZSBkb2Vucyd0IG1hdGNoIGNvbW11bmljYXRpb24gZm9ybWF0OyBpZ25vcmVcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIG1lc3NhZ2VJZCA9IHBheWxvYWRbMF07XHJcbiAgICB2YXIgbWVzc2FnZSA9IHBheWxvYWRbMV07XHJcblxyXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBwb3N0T3V0Z29pbmdNZXNzYWdlKGUsIG1lc3NhZ2VJZCwgbmV3IEVycm9yKFxyXG4gICAgICAgICdQbGVhc2UgcGFzcyBhIGZ1bmN0aW9uIGludG8gcmVnaXN0ZXIoKS4nKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBoYW5kbGVJbmNvbWluZ01lc3NhZ2UoZSwgY2FsbGJhY2ssIG1lc3NhZ2VJZCwgbWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBNZXNzYWdlV2l0aFRyYW5zZmVyTGlzdChtZXNzYWdlLCB0cmFuc2Zlckxpc3QpIHtcclxuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICB0aGlzLnRyYW5zZmVyTGlzdCA9IHRyYW5zZmVyTGlzdDtcclxuICB9XHJcblxyXG4gIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG9uSW5jb21pbmdNZXNzYWdlKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByZWdpc3RlclByb21pc2VXb3JrZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb21pc2Utd29ya2VyLXRyYW5zZmVyYWJsZS9yZWdpc3Rlci5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lzLXByb21pc2UvaW5kZXguanM/ZDZiZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gaXNQcm9taXNlO1xuXG5mdW5jdGlvbiBpc1Byb21pc2Uob2JqKSB7XG4gIHJldHVybiAhIW9iaiAmJiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykgJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lzLXByb21pc2UvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\nvar registerPromiseWorker = __webpack_require__(0);\nvar FFT = function (bufferSize, sampleRate, windowFunc, alpha) {\n    this.bufferSize = bufferSize;\n    this.sampleRate = sampleRate;\n    this.bandwidth = (2 / bufferSize) * (sampleRate / 2);\n    this.sinTable = new Float32Array(bufferSize);\n    this.cosTable = new Float32Array(bufferSize);\n    this.windowValues = new Float32Array(bufferSize);\n    this.reverseTable = new Uint32Array(bufferSize);\n    this.peakBand = 0;\n    this.peak = 0;\n    switch (windowFunc) {\n        case 'bartlett':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_1 = 0; i_1 < bufferSize; i_1++) {\n                this.windowValues[i_1] =\n                    (2 / (bufferSize - 1)) *\n                        ((bufferSize - 1) / 2 - Math.abs(i_1 - (bufferSize - 1) / 2));\n            }\n            break;\n        case 'bartlettHann':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_2 = 0; i_2 < bufferSize; i_2++) {\n                this.windowValues[i_2] =\n                    0.62 -\n                        0.48 * Math.abs(i_2 / (bufferSize - 1) - 0.5) -\n                        0.38 * Math.cos((Math.PI * 2 * i_2) / (bufferSize - 1));\n            }\n            break;\n        case 'blackman':\n            alpha = alpha || 0.16;\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_3 = 0; i_3 < bufferSize; i_3++) {\n                this.windowValues[i_3] =\n                    (1 - alpha) / 2 -\n                        0.5 * Math.cos((Math.PI * 2 * i_3) / (bufferSize - 1)) +\n                        (alpha / 2) *\n                            Math.cos((4 * Math.PI * i_3) / (bufferSize - 1));\n            }\n            break;\n        case 'cosine':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_4 = 0; i_4 < bufferSize; i_4++) {\n                this.windowValues[i_4] = Math.cos((Math.PI * i_4) / (bufferSize - 1) - Math.PI / 2);\n            }\n            break;\n        case 'gauss':\n            alpha = alpha || 0.25;\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_5 = 0; i_5 < bufferSize; i_5++) {\n                this.windowValues[i_5] = Math.pow(Math.E, -0.5 *\n                    Math.pow((i_5 - (bufferSize - 1) / 2) /\n                        ((alpha * (bufferSize - 1)) / 2), 2));\n            }\n            break;\n        case 'hamming':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_6 = 0; i_6 < bufferSize; i_6++) {\n                this.windowValues[i_6] =\n                    (0.54 - 0.46) *\n                        Math.cos((Math.PI * 2 * i_6) / (bufferSize - 1));\n            }\n            break;\n        case 'hann':\n        case undefined:\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_7 = 0; i_7 < bufferSize; i_7++) {\n                this.windowValues[i_7] =\n                    0.5 * (1 - Math.cos((Math.PI * 2 * i_7) / (bufferSize - 1)));\n            }\n            break;\n        case 'lanczoz':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_8 = 0; i_8 < bufferSize; i_8++) {\n                this.windowValues[i_8] =\n                    Math.sin(Math.PI * ((2 * i_8) / (bufferSize - 1) - 1)) /\n                        (Math.PI * ((2 * i_8) / (bufferSize - 1) - 1));\n            }\n            break;\n        case 'rectangular':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_9 = 0; i_9 < bufferSize; i_9++) {\n                this.windowValues[i_9] = 1;\n            }\n            break;\n        case 'triangular':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_10 = 0; i_10 < bufferSize; i_10++) {\n                this.windowValues[i_10] =\n                    (2 / bufferSize) *\n                        (bufferSize / 2 - Math.abs(i_10 - (bufferSize - 1) / 2));\n            }\n            break;\n        default:\n            throw Error('No such window function \\'' + windowFunc + '\\'');\n    }\n    var limit = 1;\n    // tslint:disable-next-line:no-bitwise\n    var bit = bufferSize >> 1;\n    var i;\n    while (limit < bufferSize) {\n        for (i = 0; i < limit; i++) {\n            this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n        }\n        // tslint:disable-next-line:no-bitwise\n        limit = limit << 1;\n        // tslint:disable-next-line:no-bitwise\n        bit = bit >> 1;\n    }\n    for (i = 0; i < bufferSize; i++) {\n        this.sinTable[i] = Math.sin(-Math.PI / i);\n        this.cosTable[i] = Math.cos(-Math.PI / i);\n    }\n    this.calculateSpectrum = function (buffer) {\n        // Locally scope variables for speed up\n        // tslint:disable-next-line:no-shadowed-variable\n        var bufferSize = this.bufferSize;\n        var cosTable = this.cosTable;\n        var sinTable = this.sinTable;\n        var reverseTable = this.reverseTable;\n        var real = new Float32Array(bufferSize);\n        var imag = new Float32Array(bufferSize);\n        var bSi = 2 / this.bufferSize;\n        var sqrt = Math.sqrt;\n        var rval;\n        var ival;\n        var mag;\n        var spectrum = new Float32Array(bufferSize / 2);\n        var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n        if (Math.pow(2, k) !== bufferSize) {\n            throw new Error('Invalid buffer size, must be a power of 2.');\n        }\n        if (bufferSize !== buffer.length) {\n            throw new Error('Supplied buffer is not the same size as defined FFT. FFT Size: ' +\n                bufferSize + ' Buffer Size: ' + buffer.length);\n        }\n        var halfSize = 1;\n        var phaseShiftStepReal;\n        var phaseShiftStepImag;\n        var currentPhaseShiftReal;\n        var currentPhaseShiftImag;\n        var off;\n        var tr;\n        var ti;\n        var tmpReal;\n        // tslint:disable-next-line:no-shadowed-variable\n        for (var i_11 = 0; i_11 < bufferSize; i_11++) {\n            real[i_11] =\n                buffer[reverseTable[i_11]] * this.windowValues[reverseTable[i_11]];\n            imag[i_11] = 0;\n        }\n        while (halfSize < bufferSize) {\n            phaseShiftStepReal = cosTable[halfSize];\n            phaseShiftStepImag = sinTable[halfSize];\n            currentPhaseShiftReal = 1;\n            currentPhaseShiftImag = 0;\n            for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n                // tslint:disable-next-line:no-shadowed-variable\n                var i_12 = fftStep;\n                while (i_12 < bufferSize) {\n                    off = i_12 + halfSize;\n                    tr =\n                        currentPhaseShiftReal * real[off] -\n                            currentPhaseShiftImag * imag[off];\n                    ti =\n                        currentPhaseShiftReal * imag[off] +\n                            currentPhaseShiftImag * real[off];\n                    real[off] = real[i_12] - tr;\n                    imag[off] = imag[i_12] - ti;\n                    real[i_12] += tr;\n                    imag[i_12] += ti;\n                    // tslint:disable-next-line:no-bitwise\n                    i_12 += halfSize << 1;\n                }\n                tmpReal = currentPhaseShiftReal;\n                currentPhaseShiftReal =\n                    tmpReal * phaseShiftStepReal -\n                        currentPhaseShiftImag * phaseShiftStepImag;\n                currentPhaseShiftImag =\n                    tmpReal * phaseShiftStepImag +\n                        currentPhaseShiftImag * phaseShiftStepReal;\n            }\n            // tslint:disable-next-line:no-bitwise\n            halfSize = halfSize << 1;\n        }\n        // tslint:disable-next-line:no-shadowed-variable\n        for (var i_13 = 0, N = bufferSize / 2; i_13 < N; i_13++) {\n            rval = real[i_13];\n            ival = imag[i_13];\n            mag = bSi * sqrt(rval * rval + ival * ival);\n            if (mag > this.peak) {\n                this.peakBand = i_13;\n                this.peak = mag;\n            }\n            spectrum[i_13] = mag;\n        }\n        return spectrum;\n    };\n};\nfunction makeImage(f, gradient) {\n    console.log({ gradient: gradient });\n    var image = new ImageData(f.length, f[0].length);\n    for (var i = 0; i < image.data.length; i += 4) {\n        var j = i / 4;\n        var x = j % f.length;\n        var y = Math.floor(j / f.length);\n        image.data[i] = gradient[f[x][y]][0];\n        image.data[i + 1] = gradient[f[x][y]][1];\n        image.data[i + 2] = gradient[f[x][y]][2];\n        image.data[i + 3] = gradient[f[x][y]][3] * 255;\n        // image.data[i]     = 255\n        // image.data[i + 1] = 255\n        // image.data[i + 2] = 255\n        // image.data[i + 3] = f[x][y]\n    }\n    return image;\n}\nfunction resample(oldMatrix, width) {\n    var columnsNumber = width;\n    var newMatrix = [];\n    var oldPiece = 1 / oldMatrix.length;\n    var newPiece = 1 / columnsNumber;\n    var i;\n    for (i = 0; i < columnsNumber; i++) {\n        var column = new Array(oldMatrix[0].length);\n        var j = void 0;\n        for (j = 0; j < oldMatrix.length; j++) {\n            var oldStart = j * oldPiece;\n            var oldEnd = oldStart + oldPiece;\n            var newStart = i * newPiece;\n            var newEnd = newStart + newPiece;\n            var overlap = oldEnd <= newStart || newEnd <= oldStart\n                ? 0\n                : Math.min(Math.max(oldEnd, newStart), Math.max(newEnd, oldStart)) -\n                    Math.max(Math.min(oldEnd, newStart), Math.min(newEnd, oldStart));\n            var k = void 0;\n            /* eslint-disable max-depth */\n            if (overlap > 0) {\n                for (k = 0; k < oldMatrix[0].length; k++) {\n                    if (column[k] == null) {\n                        column[k] = 0;\n                    }\n                    column[k] += (overlap / newPiece) * oldMatrix[j][k];\n                }\n            }\n        }\n        var intColumn = new Uint8Array(oldMatrix[0].length);\n        var m = void 0;\n        for (m = 0; m < oldMatrix[0].length; m++) {\n            intColumn[m] = column[m];\n        }\n        newMatrix.push(intColumn);\n    }\n    return newMatrix;\n}\nfunction getFrequencies(_a) {\n    var fftSamples = _a.fftSamples, buffer = _a.buffer, length = _a.length, sampleRate = _a.sampleRate, width = _a.width, gradient = _a.gradient;\n    var channelOne = new Float32Array(buffer);\n    var frequencies = [];\n    if (!channelOne) {\n        throw new Error('Web Audio buffer is not available');\n    }\n    var uniqueSamplesPerPx = length / width;\n    var nOverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\n    var fft = new FFT(fftSamples, sampleRate, 'gauss', .05);\n    var currentOffset = 0;\n    while (currentOffset + fftSamples < length) {\n        var segment = channelOne.slice(currentOffset, currentOffset + fftSamples);\n        var spectrum = fft.calculateSpectrum(segment);\n        var array = new Uint8Array(fftSamples / 2);\n        var j = void 0;\n        for (j = 0; j < fftSamples / 2; j++) {\n            array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\n        }\n        frequencies.push(array.reverse());\n        currentOffset += fftSamples - nOverlap;\n    }\n    // const resampled = resample(frequencies, width)\n    return [frequencies, makeImage(frequencies, gradient)];\n}\nregisterPromiseWorker(getFrequencies);\n/* harmony default export */ __webpack_exports__[\"default\"] = (null);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);