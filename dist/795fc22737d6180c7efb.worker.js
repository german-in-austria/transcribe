/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction isPromise (obj) {\n  // via https://unpkg.com/is-promise@2.1.0/index.js\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function'\n}\n\nfunction registerPromiseWorker (callback) {\n  function postOutgoingMessage (e, messageId, error, result) {\n    function postMessage (msg) {\n      /* istanbul ignore if */\n      if (typeof self.postMessage !== 'function') { // service worker\n        e.ports[0].postMessage(msg)\n      } else { // web worker\n        self.postMessage(msg)\n      }\n    }\n    if (error) {\n      /* istanbul ignore else */\n      if (typeof console !== 'undefined' && 'error' in console) {\n        // This is to make errors easier to debug. I think it's important\n        // enough to just leave here without giving the user an option\n        // to silence it.\n        console.error('Worker caught an error:', error)\n      }\n      postMessage([messageId, {\n        message: error.message\n      }])\n    } else {\n      postMessage([messageId, null, result])\n    }\n  }\n\n  function tryCatchFunc (callback, message) {\n    try {\n      return { res: callback(message) }\n    } catch (e) {\n      return { err: e }\n    }\n  }\n\n  function handleIncomingMessage (e, callback, messageId, message) {\n    var result = tryCatchFunc(callback, message)\n\n    if (result.err) {\n      postOutgoingMessage(e, messageId, result.err)\n    } else if (!isPromise(result.res)) {\n      postOutgoingMessage(e, messageId, null, result.res)\n    } else {\n      result.res.then(function (finalResult) {\n        postOutgoingMessage(e, messageId, null, finalResult)\n      }, function (finalError) {\n        postOutgoingMessage(e, messageId, finalError)\n      })\n    }\n  }\n\n  function onIncomingMessage (e) {\n    var payload = e.data\n    if (!Array.isArray(payload) || payload.length !== 2) {\n      // message doens't match communication format; ignore\n      return\n    }\n    var messageId = payload[0]\n    var message = payload[1]\n\n    if (typeof callback !== 'function') {\n      postOutgoingMessage(e, messageId, new Error(\n        'Please pass a function into register().'))\n    } else {\n      handleIncomingMessage(e, callback, messageId, message)\n    }\n  }\n\n  self.addEventListener('message', onIncomingMessage)\n}\n\nmodule.exports = registerPromiseWorker\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Byb21pc2Utd29ya2VyL3JlZ2lzdGVyLmpzPzU2MWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQSxPQUFPLE9BQU87QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsS0FBSztBQUNMLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAob2JqKSB7XG4gIC8vIHZpYSBodHRwczovL3VucGtnLmNvbS9pcy1wcm9taXNlQDIuMS4wL2luZGV4LmpzXG4gIHJldHVybiAhIW9iaiAmJiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykgJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nXG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUHJvbWlzZVdvcmtlciAoY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gcG9zdE91dGdvaW5nTWVzc2FnZSAoZSwgbWVzc2FnZUlkLCBlcnJvciwgcmVzdWx0KSB7XG4gICAgZnVuY3Rpb24gcG9zdE1lc3NhZ2UgKG1zZykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAodHlwZW9mIHNlbGYucG9zdE1lc3NhZ2UgIT09ICdmdW5jdGlvbicpIHsgLy8gc2VydmljZSB3b3JrZXJcbiAgICAgICAgZS5wb3J0c1swXS5wb3N0TWVzc2FnZShtc2cpXG4gICAgICB9IGVsc2UgeyAvLyB3ZWIgd29ya2VyXG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2UobXNnKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmICdlcnJvcicgaW4gY29uc29sZSkge1xuICAgICAgICAvLyBUaGlzIGlzIHRvIG1ha2UgZXJyb3JzIGVhc2llciB0byBkZWJ1Zy4gSSB0aGluayBpdCdzIGltcG9ydGFudFxuICAgICAgICAvLyBlbm91Z2ggdG8ganVzdCBsZWF2ZSBoZXJlIHdpdGhvdXQgZ2l2aW5nIHRoZSB1c2VyIGFuIG9wdGlvblxuICAgICAgICAvLyB0byBzaWxlbmNlIGl0LlxuICAgICAgICBjb25zb2xlLmVycm9yKCdXb3JrZXIgY2F1Z2h0IGFuIGVycm9yOicsIGVycm9yKVxuICAgICAgfVxuICAgICAgcG9zdE1lc3NhZ2UoW21lc3NhZ2VJZCwge1xuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gICAgICB9XSlcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zdE1lc3NhZ2UoW21lc3NhZ2VJZCwgbnVsbCwgcmVzdWx0XSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0cnlDYXRjaEZ1bmMgKGNhbGxiYWNrLCBtZXNzYWdlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHJlczogY2FsbGJhY2sobWVzc2FnZSkgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB7IGVycjogZSB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSW5jb21pbmdNZXNzYWdlIChlLCBjYWxsYmFjaywgbWVzc2FnZUlkLCBtZXNzYWdlKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoRnVuYyhjYWxsYmFjaywgbWVzc2FnZSlcblxuICAgIGlmIChyZXN1bHQuZXJyKSB7XG4gICAgICBwb3N0T3V0Z29pbmdNZXNzYWdlKGUsIG1lc3NhZ2VJZCwgcmVzdWx0LmVycilcbiAgICB9IGVsc2UgaWYgKCFpc1Byb21pc2UocmVzdWx0LnJlcykpIHtcbiAgICAgIHBvc3RPdXRnb2luZ01lc3NhZ2UoZSwgbWVzc2FnZUlkLCBudWxsLCByZXN1bHQucmVzKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucmVzLnRoZW4oZnVuY3Rpb24gKGZpbmFsUmVzdWx0KSB7XG4gICAgICAgIHBvc3RPdXRnb2luZ01lc3NhZ2UoZSwgbWVzc2FnZUlkLCBudWxsLCBmaW5hbFJlc3VsdClcbiAgICAgIH0sIGZ1bmN0aW9uIChmaW5hbEVycm9yKSB7XG4gICAgICAgIHBvc3RPdXRnb2luZ01lc3NhZ2UoZSwgbWVzc2FnZUlkLCBmaW5hbEVycm9yKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkluY29taW5nTWVzc2FnZSAoZSkge1xuICAgIHZhciBwYXlsb2FkID0gZS5kYXRhXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBheWxvYWQpIHx8IHBheWxvYWQubGVuZ3RoICE9PSAyKSB7XG4gICAgICAvLyBtZXNzYWdlIGRvZW5zJ3QgbWF0Y2ggY29tbXVuaWNhdGlvbiBmb3JtYXQ7IGlnbm9yZVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBtZXNzYWdlSWQgPSBwYXlsb2FkWzBdXG4gICAgdmFyIG1lc3NhZ2UgPSBwYXlsb2FkWzFdXG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwb3N0T3V0Z29pbmdNZXNzYWdlKGUsIG1lc3NhZ2VJZCwgbmV3IEVycm9yKFxuICAgICAgICAnUGxlYXNlIHBhc3MgYSBmdW5jdGlvbiBpbnRvIHJlZ2lzdGVyKCkuJykpXG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZUluY29taW5nTWVzc2FnZShlLCBjYWxsYmFjaywgbWVzc2FnZUlkLCBtZXNzYWdlKVxuICAgIH1cbiAgfVxuXG4gIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG9uSW5jb21pbmdNZXNzYWdlKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZ2lzdGVyUHJvbWlzZVdvcmtlclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb21pc2Utd29ya2VyL3JlZ2lzdGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\nvar registerPromiseWorker = __webpack_require__(0);\nvar FFT = function (bufferSize, sampleRate, windowFunc, alpha) {\n    this.bufferSize = bufferSize;\n    this.sampleRate = sampleRate;\n    this.bandwidth = (2 / bufferSize) * (sampleRate / 2);\n    this.sinTable = new Float32Array(bufferSize);\n    this.cosTable = new Float32Array(bufferSize);\n    this.windowValues = new Float32Array(bufferSize);\n    this.reverseTable = new Uint32Array(bufferSize);\n    this.peakBand = 0;\n    this.peak = 0;\n    switch (windowFunc) {\n        case 'bartlett':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_1 = 0; i_1 < bufferSize; i_1++) {\n                this.windowValues[i_1] =\n                    (2 / (bufferSize - 1)) *\n                        ((bufferSize - 1) / 2 - Math.abs(i_1 - (bufferSize - 1) / 2));\n            }\n            break;\n        case 'bartlettHann':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_2 = 0; i_2 < bufferSize; i_2++) {\n                this.windowValues[i_2] =\n                    0.62 -\n                        0.48 * Math.abs(i_2 / (bufferSize - 1) - 0.5) -\n                        0.38 * Math.cos((Math.PI * 2 * i_2) / (bufferSize - 1));\n            }\n            break;\n        case 'blackman':\n            alpha = alpha || 0.16;\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_3 = 0; i_3 < bufferSize; i_3++) {\n                this.windowValues[i_3] =\n                    (1 - alpha) / 2 -\n                        0.5 * Math.cos((Math.PI * 2 * i_3) / (bufferSize - 1)) +\n                        (alpha / 2) *\n                            Math.cos((4 * Math.PI * i_3) / (bufferSize - 1));\n            }\n            break;\n        case 'cosine':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_4 = 0; i_4 < bufferSize; i_4++) {\n                this.windowValues[i_4] = Math.cos((Math.PI * i_4) / (bufferSize - 1) - Math.PI / 2);\n            }\n            break;\n        case 'gauss':\n            alpha = alpha || 0.25;\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_5 = 0; i_5 < bufferSize; i_5++) {\n                this.windowValues[i_5] = Math.pow(Math.E, -0.5 *\n                    Math.pow((i_5 - (bufferSize - 1) / 2) /\n                        ((alpha * (bufferSize - 1)) / 2), 2));\n            }\n            break;\n        case 'hamming':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_6 = 0; i_6 < bufferSize; i_6++) {\n                this.windowValues[i_6] =\n                    (0.54 - 0.46) *\n                        Math.cos((Math.PI * 2 * i_6) / (bufferSize - 1));\n            }\n            break;\n        case 'hann':\n        case undefined:\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_7 = 0; i_7 < bufferSize; i_7++) {\n                this.windowValues[i_7] =\n                    0.5 * (1 - Math.cos((Math.PI * 2 * i_7) / (bufferSize - 1)));\n            }\n            break;\n        case 'lanczoz':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_8 = 0; i_8 < bufferSize; i_8++) {\n                this.windowValues[i_8] =\n                    Math.sin(Math.PI * ((2 * i_8) / (bufferSize - 1) - 1)) /\n                        (Math.PI * ((2 * i_8) / (bufferSize - 1) - 1));\n            }\n            break;\n        case 'rectangular':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_9 = 0; i_9 < bufferSize; i_9++) {\n                this.windowValues[i_9] = 1;\n            }\n            break;\n        case 'triangular':\n            // tslint:disable-next-line:no-shadowed-variable\n            for (var i_10 = 0; i_10 < bufferSize; i_10++) {\n                this.windowValues[i_10] =\n                    (2 / bufferSize) *\n                        (bufferSize / 2 - Math.abs(i_10 - (bufferSize - 1) / 2));\n            }\n            break;\n        default:\n            throw Error('No such window function \\'' + windowFunc + '\\'');\n    }\n    var limit = 1;\n    // tslint:disable-next-line:no-bitwise\n    var bit = bufferSize >> 1;\n    var i;\n    while (limit < bufferSize) {\n        for (i = 0; i < limit; i++) {\n            this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n        }\n        // tslint:disable-next-line:no-bitwise\n        limit = limit << 1;\n        // tslint:disable-next-line:no-bitwise\n        bit = bit >> 1;\n    }\n    for (i = 0; i < bufferSize; i++) {\n        this.sinTable[i] = Math.sin(-Math.PI / i);\n        this.cosTable[i] = Math.cos(-Math.PI / i);\n    }\n    this.calculateSpectrum = function (buffer) {\n        // Locally scope variables for speed up\n        // tslint:disable-next-line:no-shadowed-variable\n        var bufferSize = this.bufferSize;\n        var cosTable = this.cosTable;\n        var sinTable = this.sinTable;\n        var reverseTable = this.reverseTable;\n        var real = new Float32Array(bufferSize);\n        var imag = new Float32Array(bufferSize);\n        var bSi = 2 / this.bufferSize;\n        var sqrt = Math.sqrt;\n        var rval;\n        var ival;\n        var mag;\n        var spectrum = new Float32Array(bufferSize / 2);\n        var k = Math.floor(Math.log(bufferSize) / Math.LN2);\n        if (Math.pow(2, k) !== bufferSize) {\n            throw new Error('Invalid buffer size, must be a power of 2.');\n        }\n        if (bufferSize !== buffer.length) {\n            throw new Error('Supplied buffer is not the same size as defined FFT. FFT Size: ' +\n                bufferSize + ' Buffer Size: ' + buffer.length);\n        }\n        var halfSize = 1;\n        var phaseShiftStepReal;\n        var phaseShiftStepImag;\n        var currentPhaseShiftReal;\n        var currentPhaseShiftImag;\n        var off;\n        var tr;\n        var ti;\n        var tmpReal;\n        // tslint:disable-next-line:no-shadowed-variable\n        for (var i_11 = 0; i_11 < bufferSize; i_11++) {\n            real[i_11] =\n                buffer[reverseTable[i_11]] * this.windowValues[reverseTable[i_11]];\n            imag[i_11] = 0;\n        }\n        while (halfSize < bufferSize) {\n            phaseShiftStepReal = cosTable[halfSize];\n            phaseShiftStepImag = sinTable[halfSize];\n            currentPhaseShiftReal = 1;\n            currentPhaseShiftImag = 0;\n            for (var fftStep = 0; fftStep < halfSize; fftStep++) {\n                // tslint:disable-next-line:no-shadowed-variable\n                var i_12 = fftStep;\n                while (i_12 < bufferSize) {\n                    off = i_12 + halfSize;\n                    tr =\n                        currentPhaseShiftReal * real[off] -\n                            currentPhaseShiftImag * imag[off];\n                    ti =\n                        currentPhaseShiftReal * imag[off] +\n                            currentPhaseShiftImag * real[off];\n                    real[off] = real[i_12] - tr;\n                    imag[off] = imag[i_12] - ti;\n                    real[i_12] += tr;\n                    imag[i_12] += ti;\n                    // tslint:disable-next-line:no-bitwise\n                    i_12 += halfSize << 1;\n                }\n                tmpReal = currentPhaseShiftReal;\n                currentPhaseShiftReal =\n                    tmpReal * phaseShiftStepReal -\n                        currentPhaseShiftImag * phaseShiftStepImag;\n                currentPhaseShiftImag =\n                    tmpReal * phaseShiftStepImag +\n                        currentPhaseShiftImag * phaseShiftStepReal;\n            }\n            // tslint:disable-next-line:no-bitwise\n            halfSize = halfSize << 1;\n        }\n        // tslint:disable-next-line:no-shadowed-variable\n        for (var i_13 = 0, N = bufferSize / 2; i_13 < N; i_13++) {\n            rval = real[i_13];\n            ival = imag[i_13];\n            mag = bSi * sqrt(rval * rval + ival * ival);\n            if (mag > this.peak) {\n                this.peakBand = i_13;\n                this.peak = mag;\n            }\n            spectrum[i_13] = mag;\n        }\n        return spectrum;\n    };\n};\nfunction makeImage(f, gradient) {\n    console.log({ gradient: gradient });\n    var image = new ImageData(f.length, f[0].length);\n    for (var i = 0; i < image.data.length; i += 4) {\n        var j = i / 4;\n        var x = j % f.length;\n        var y = Math.floor(j / f.length);\n        image.data[i] = gradient[f[x][y]][0];\n        image.data[i + 1] = gradient[f[x][y]][1];\n        image.data[i + 2] = gradient[f[x][y]][2];\n        image.data[i + 3] = gradient[f[x][y]][3] * 255;\n        // image.data[i]     = 255\n        // image.data[i + 1] = 255\n        // image.data[i + 2] = 255\n        // image.data[i + 3] = f[x][y]\n    }\n    return image;\n}\nfunction resample(oldMatrix, width) {\n    var columnsNumber = width;\n    var newMatrix = [];\n    var oldPiece = 1 / oldMatrix.length;\n    var newPiece = 1 / columnsNumber;\n    var i;\n    for (i = 0; i < columnsNumber; i++) {\n        var column = new Array(oldMatrix[0].length);\n        var j = void 0;\n        for (j = 0; j < oldMatrix.length; j++) {\n            var oldStart = j * oldPiece;\n            var oldEnd = oldStart + oldPiece;\n            var newStart = i * newPiece;\n            var newEnd = newStart + newPiece;\n            var overlap = oldEnd <= newStart || newEnd <= oldStart\n                ? 0\n                : Math.min(Math.max(oldEnd, newStart), Math.max(newEnd, oldStart)) -\n                    Math.max(Math.min(oldEnd, newStart), Math.min(newEnd, oldStart));\n            var k = void 0;\n            /* eslint-disable max-depth */\n            if (overlap > 0) {\n                for (k = 0; k < oldMatrix[0].length; k++) {\n                    if (column[k] == null) {\n                        column[k] = 0;\n                    }\n                    column[k] += (overlap / newPiece) * oldMatrix[j][k];\n                }\n            }\n        }\n        var intColumn = new Uint8Array(oldMatrix[0].length);\n        var m = void 0;\n        for (m = 0; m < oldMatrix[0].length; m++) {\n            intColumn[m] = column[m];\n        }\n        newMatrix.push(intColumn);\n    }\n    return newMatrix;\n}\nfunction getFrequencies(_a) {\n    var fftSamples = _a.fftSamples, buffer = _a.buffer, length = _a.length, sampleRate = _a.sampleRate, width = _a.width, gradient = _a.gradient;\n    var channelOne = new Float32Array(buffer);\n    var frequencies = [];\n    if (!channelOne) {\n        throw new Error('Web Audio buffer is not available');\n    }\n    var uniqueSamplesPerPx = length / width;\n    var nOverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\n    var fft = new FFT(fftSamples, sampleRate, 'gauss', .05);\n    var currentOffset = 0;\n    while (currentOffset + fftSamples < length) {\n        var segment = channelOne.slice(currentOffset, currentOffset + fftSamples);\n        var spectrum = fft.calculateSpectrum(segment);\n        var array = new Uint8Array(fftSamples / 2);\n        var j = void 0;\n        for (j = 0; j < fftSamples / 2; j++) {\n            array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\n        }\n        frequencies.push(array.reverse());\n        currentOffset += fftSamples - nOverlap;\n    }\n    // const resampled = resample(frequencies, width)\n    return [frequencies, makeImage(frequencies, gradient)];\n}\nregisterPromiseWorker(getFrequencies);\n/* harmony default export */ __webpack_exports__[\"default\"] = (null);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ]);