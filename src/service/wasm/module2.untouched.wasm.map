{"version":3,"sources":["~lib/internal/allocator.ts","~lib/allocator/arena.ts","~lib/memory.ts","~lib/internal/memory.ts","src/service/wasm/get-frequencies.ts","~lib/math.ts","~lib/builtins.ts","~lib/array.ts","~lib/internal/arraybuffer.ts"],"names":[],"mappings":"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","sourceRoot":"assemblyscript:///","sourceContents":["/** Number of alignment bits. */\nexport const AL_BITS: u32 = 3;\n/** Number of possible alignment values. */\nexport const AL_SIZE: usize = 1 << <usize>AL_BITS;\n/** Mask to obtain just the alignment bits. */\nexport const AL_MASK: usize = AL_SIZE - 1;\n/** Maximum 32-bit allocation size. */\nexport const MAX_SIZE_32: usize = 1 << 30; // 1GB\n","/**\n * Arena Memory Allocator\n *\n * Provides a `memory.reset` function to reset the heap to its initial state. A user has to make\n * sure that there are no more references to cleared memory afterwards. Always aligns to 8 bytes.\n *\n * @module std/assembly/allocator/arena\n *//***/\n\nimport { AL_MASK, MAX_SIZE_32 } from \"../internal/allocator\";\n\nvar startOffset: usize = (HEAP_BASE + AL_MASK) & ~AL_MASK;\nvar offset: usize = startOffset;\n\n// Memory allocator interface\n\n@global export function __memory_allocate(size: usize): usize {\n  if (size > MAX_SIZE_32) unreachable();\n  var ptr = offset;\n  var newPtr = (ptr + max<usize>(size, 1) + AL_MASK) & ~AL_MASK;\n  var pagesBefore = memory.size();\n  if (newPtr > <usize>pagesBefore << 16) {\n    let pagesNeeded = ((newPtr - ptr + 0xffff) & ~0xffff) >>> 16;\n    let pagesWanted = max(pagesBefore, pagesNeeded); // double memory\n    if (memory.grow(pagesWanted) < 0) {\n      if (memory.grow(pagesNeeded) < 0) {\n        unreachable(); // out of memory\n      }\n    }\n  }\n  offset = newPtr;\n  return ptr;\n}\n\n@global export function __memory_free(ptr: usize): void { /* nop */ }\n\n@global export function __memory_reset(): void {\n  offset = startOffset;\n}\n","import { memcmp, memmove, memset } from \"./internal/memory\";\n\n@builtin export declare const HEAP_BASE: usize; // tslint:disable-line\n\n/* tslint:disable */\n\nexport namespace memory {\n\n  @builtin export declare function size(): i32;\n\n  @builtin export declare function grow(pages: i32): i32;\n\n  @inline export function fill(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n    if (isDefined(__memory_fill)) { __memory_fill(dest, c, n); return; }\n    memset(dest, c, n);\n  }\n\n  @inline export function copy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n    if (isDefined(__memory_copy)) { __memory_copy(dest, src, n); return; }\n    memmove(dest, src, n);\n  }\n\n  @inline export function compare(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\n    if (isDefined(__memory_compare)) return __memory_compare(vl, vr, n);\n    return memcmp(vl, vr, n);\n  }\n\n  // Passive segments\n\n  // export function init(segmentIndex: u32, srcOffset: usize, dstOffset: usize, n: usize): void {\n  //   __memory_init(segmentIndex, srcOffset, dstOffset);\n  // }\n\n  // export function drop(segmentIndex: u32): void {\n  //   __memory_drop(segmentIndex);\n  // }\n\n  // Allocator\n\n  @inline export function allocate(size: usize): usize {\n    if (isDefined(__memory_allocate)) return __memory_allocate(size);\n    WARNING(\"Calling 'memory.allocate' requires a memory manager to be present.\");\n    return <usize>unreachable();\n  }\n\n  @inline export function free(ptr: usize): void {\n    if (isDefined(__memory_free)) { __memory_free(ptr); return; }\n    WARNING(\"Calling 'memory.free' requires a memory manager to be present.\");\n    unreachable();\n  }\n\n  @inline export function reset(): void {\n    if (isDefined(__memory_reset)) { __memory_reset(); return; }\n    unreachable();\n  }\n}\n","// this function will go away once `memory.copy` becomes an intrinsic\nexport function memcpy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memcpy.c\n  var w: u32, x: u32;\n\n  // copy 1 byte each until src is aligned to 4 bytes\n  while (n && (src & 3)) {\n    store<u8>(dest++, load<u8>(src++));\n    n--;\n  }\n\n  // if dst is aligned to 4 bytes as well, copy 4 bytes each\n  if ((dest & 3) == 0) {\n    while (n >= 16) {\n      store<u32>(dest     , load<u32>(src     ));\n      store<u32>(dest +  4, load<u32>(src +  4));\n      store<u32>(dest +  8, load<u32>(src +  8));\n      store<u32>(dest + 12, load<u32>(src + 12));\n      src += 16; dest += 16; n -= 16;\n    }\n    if (n & 8) {\n      store<u32>(dest    , load<u32>(src    ));\n      store<u32>(dest + 4, load<u32>(src + 4));\n      dest += 8; src += 8;\n    }\n    if (n & 4) {\n      store<u32>(dest, load<u32>(src));\n      dest += 4; src += 4;\n    }\n    if (n & 2) { // drop to 2 bytes each\n      store<u16>(dest, load<u16>(src));\n      dest += 2; src += 2;\n    }\n    if (n & 1) { // drop to 1 byte\n      store<u8>(dest++, load<u8>(src++));\n    }\n    return;\n  }\n\n  // if dst is not aligned to 4 bytes, use alternating shifts to copy 4 bytes each\n  // doing shifts if faster when copying enough bytes (here: 32 or more)\n  if (n >= 32) {\n    switch (dest & 3) {\n      // known to be != 0\n      case 1: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 3;\n        while (n >= 17) {\n          x = load<u32>(src + 1);\n          store<u32>(dest, w >> 24 | x << 8);\n          w = load<u32>(src + 5);\n          store<u32>(dest + 4, x >> 24 | w << 8);\n          x = load<u32>(src + 9);\n          store<u32>(dest + 8, w >> 24 | x << 8);\n          w = load<u32>(src + 13);\n          store<u32>(dest + 12, x >> 24 | w << 8);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 2: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 2;\n        while (n >= 18) {\n          x = load<u32>(src + 2);\n          store<u32>(dest, w >> 16 | x << 16);\n          w = load<u32>(src + 6);\n          store<u32>(dest + 4, x >> 16 | w << 16);\n          x = load<u32>(src + 10);\n          store<u32>(dest + 8, w >> 16 | x << 16);\n          w = load<u32>(src + 14);\n          store<u32>(dest + 12, x >> 16 | w << 16);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 3: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        n -= 1;\n        while (n >= 19) {\n          x = load<u32>(src + 3);\n          store<u32>(dest, w >> 8 | x << 24);\n          w = load<u32>(src + 7);\n          store<u32>(dest + 4, x >> 8 | w << 24);\n          x = load<u32>(src + 11);\n          store<u32>(dest + 8, w >> 8 | x << 24);\n          w = load<u32>(src + 15);\n          store<u32>(dest + 12, x >> 8 | w << 24);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n    }\n  }\n\n  // copy remaining bytes one by one\n  if (n & 16) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 8) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 4) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 2) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 1) {\n    store<u8>(dest++, load<u8>(src++));\n  }\n}\n\n// this function will go away once `memory.copy` becomes an intrinsic\nexport function memmove(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n  if (dest == src) return;\n  if (src + n <= dest || dest + n <= src) {\n    memcpy(dest, src, n);\n    return;\n  }\n  if (dest < src) {\n    if ((src & 7) == (dest & 7)) {\n      while (dest & 7) {\n        if (!n) return;\n        --n;\n        store<u8>(dest++, load<u8>(src++));\n      }\n      while (n >= 8) {\n        store<u64>(dest, load<u64>(src));\n        n    -= 8;\n        dest += 8;\n        src  += 8;\n      }\n    }\n    while (n) {\n      store<u8>(dest++, load<u8>(src++));\n      --n;\n    }\n  } else {\n    if ((src & 7) == (dest & 7)) {\n      while ((dest + n) & 7) {\n        if (!n) return;\n        store<u8>(dest + --n, load<u8>(src + n));\n      }\n      while (n >= 8) {\n        n -= 8;\n        store<u64>(dest + n, load<u64>(src + n));\n      }\n    }\n    while (n) {\n      store<u8>(dest + --n, load<u8>(src + n));\n    }\n  }\n}\n\n// this function will go away once `memory.fill` becomes an intrinsic\nexport function memset(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n\n  // fill head and tail with minimal branching\n  if (!n) return;\n  store<u8>(dest, c);\n  store<u8>(dest + n - 1, c);\n  if (n <= 2) return;\n\n  store<u8>(dest + 1, c);\n  store<u8>(dest + 2, c);\n  store<u8>(dest + n - 2, c);\n  store<u8>(dest + n - 3, c);\n  if (n <= 6) return;\n  store<u8>(dest + 3, c);\n  store<u8>(dest + n - 4, c);\n  if (n <= 8) return;\n\n  // advance pointer to align it at 4-byte boundary\n  var k: usize = -dest & 3;\n  dest += k;\n  n -= k;\n  n &= -4;\n\n  var c32: u32 = <u32>-1 / 255 * c;\n\n  // fill head/tail up to 28 bytes each in preparation\n  store<u32>(dest, c32);\n  store<u32>(dest + n - 4, c32);\n  if (n <= 8) return;\n  store<u32>(dest + 4, c32);\n  store<u32>(dest + 8, c32);\n  store<u32>(dest + n - 12, c32);\n  store<u32>(dest + n - 8, c32);\n  if (n <= 24) return;\n  store<u32>(dest + 12, c32);\n  store<u32>(dest + 16, c32);\n  store<u32>(dest + 20, c32);\n  store<u32>(dest + 24, c32);\n  store<u32>(dest + n - 28, c32);\n  store<u32>(dest + n - 24, c32);\n  store<u32>(dest + n - 20, c32);\n  store<u32>(dest + n - 16, c32);\n\n  // align to a multiple of 8\n  k = 24 + (dest & 4);\n  dest += k;\n  n -= k;\n\n  // copy 32 bytes each\n  var c64: u64 = <u64>c32 | (<u64>c32 << 32);\n  while (n >= 32) {\n    store<u64>(dest, c64);\n    store<u64>(dest + 8, c64);\n    store<u64>(dest + 16, c64);\n    store<u64>(dest + 24, c64);\n    n -= 32;\n    dest += 32;\n  }\n}\n\nexport function memcmp(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\n  if (vl == vr) return 0;\n  while (n != 0 && load<u8>(vl) == load<u8>(vr)) {\n    n--; vl++; vr++;\n  }\n  return n ? <i32>load<u8>(vl) - <i32>load<u8>(vr) : 0;\n}\n","// WASM\n\nimport 'allocator/arena';\n\nexport { memory };\n\nconst E: f32 = <f32>2.718281828459045\n\n// import { heatMap } from '../heat-map'\n\n// tslint:disable:no-bitwise\n// const heatMapRgb = <string[]>heatMap.map((hex: string): i8[] => {\n//   const bigint = parseInt(hex, 16)\n//   return [\n//     (bigint >> 16) & 255,\n//     (bigint >> 8) & 255,\n//     bigint & 255\n//   ]\n// })\n\n// interface FFT {\n//   bufferSize: number\n//   sampleRate: number\n//   sinTable: f32\n//   cosTable: Float32Array\n//   windowValues: Float32Array\n//   reverseTable: Uint32Array\n//   peakBand: number\n//   peak: number\n//   calculateSpectrum(buffer: Float32Array): Float32Array\n// }\n\nclass FFT {\n  bufferSize: i32\n  sampleRate: i32\n  sinTable: f32[]\n  cosTable: f32[]\n  windowValues: f32[]\n  reverseTable: i32[]\n  peakBand: i32\n  peak: f32\n\n  constructor(bufferSize: i32, sampleRate: i32, alpha: f32) {\n    this.bufferSize = bufferSize\n    this.sampleRate = sampleRate\n    this.sinTable = []\n    this.cosTable = []\n    this.windowValues = []\n    this.reverseTable = []\n    this.peakBand = 0\n    this.peak = 0\n    const s = <f32>bufferSize\n        // tslint:disable-next-line:no-shadowed-variable\n    for (let i: i32 = 0; i < bufferSize; i++) {\n      this.windowValues[i] = <f32>(E ** (\n        <f32>-0.5 * <f32>(\n          (\n            <f32>i - (s - <f32>1) / <f32>2\n          ) /\n          (\n            (alpha * (s - <f32>1)) / <f32>2\n          ) ** <f32>2\n        )\n      ))\n    }\n\n    let limit = 1;\n    // tslint:disable-next-line:no-bitwise\n    let bit = bufferSize >> 1;\n\n    while (limit < bufferSize) {\n      for (let i = 0; i < limit; i++) {\n        this.reverseTable[i + limit] = this.reverseTable[i] + bit;\n      }\n\n      // tslint:disable-next-line:no-bitwise\n      limit = limit << 1;\n      // tslint:disable-next-line:no-bitwise\n      bit = bit >> 1;\n    }\n\n    for (let i = 0; i < bufferSize; i++) {\n      this.sinTable[i] = <f32>Math.sin(<f32>-Math.PI / <f32>i);\n      this.cosTable[i] = <f32>Math.cos(<f32>-Math.PI / <f32>i);\n    }\n  }\n\n  calculateSpectrum(buffer: f32[]): f32[] {\n    // Locally scope variables for speed up\n    // tslint:disable-next-line:no-shadowed-variable\n    const bufferSize = this.bufferSize\n    const cosTable = this.cosTable\n    const sinTable = this.sinTable\n    const reverseTable = this.reverseTable\n    const real: f32[] = []\n    const imag: f32[] = []\n    const bSi = 2 / this.bufferSize\n\n    let rval: f32\n    let ival: f32\n    let mag: f32\n\n    const spectrum: f32[] = []\n\n    // if (Math.pow(2, k) !== bufferSize) {\n    //   throw new Error('Invalid buffer size, must be a power of 2.')\n    // }\n    // if (bufferSize !== buffer.length) {\n    //   throw new Error('Supplied buffer is not the same size as defined FFT. FFT Size: ' +\n    //     bufferSize + ' Buffer Size: ' + buffer.length)\n    // }\n\n    let halfSize = 1\n    let phaseShiftStepReal: f32\n    let phaseShiftStepImag: f32\n    let currentPhaseShiftReal: f32\n    let currentPhaseShiftImag: f32\n    let off: i32\n    let tr: f32\n    let ti: f32\n    let tmpReal: f32\n\n    // tslint:disable-next-line:no-shadowed-variable\n    for (let i = 0; i < bufferSize; i++) {\n      real[i] =\n        buffer[reverseTable[i]] * this.windowValues[reverseTable[i]];\n      imag[i] = 0;\n    }\n\n    while (halfSize < bufferSize) {\n      phaseShiftStepReal = cosTable[halfSize];\n      phaseShiftStepImag = sinTable[halfSize];\n\n      currentPhaseShiftReal = 1;\n      currentPhaseShiftImag = 0;\n\n      for (let fftStep = 0; fftStep < halfSize; fftStep++) {\n        // tslint:disable-next-line:no-shadowed-variable\n        let i = fftStep;\n\n        while (i < bufferSize) {\n          off = i + halfSize;\n          tr =\n              currentPhaseShiftReal * real[off] -\n              currentPhaseShiftImag * imag[off];\n          ti =\n              currentPhaseShiftReal * imag[off] +\n              currentPhaseShiftImag * real[off];\n\n          real[off] = real[i] - tr;\n          imag[off] = imag[i] - ti;\n          real[i] += tr;\n          imag[i] += ti;\n\n          // tslint:disable-next-line:no-bitwise\n          i += halfSize << 1\n        }\n\n        tmpReal = currentPhaseShiftReal;\n        currentPhaseShiftReal =\n          tmpReal * phaseShiftStepReal -\n          currentPhaseShiftImag * phaseShiftStepImag;\n        currentPhaseShiftImag =\n          tmpReal * phaseShiftStepImag +\n          currentPhaseShiftImag * phaseShiftStepReal;\n      }\n\n      // tslint:disable-next-line:no-bitwise\n      halfSize = halfSize << 1\n    }\n\n    // tslint:disable-next-line:no-shadowed-variable\n    for (let i = 0, N = bufferSize / 2; i < N; i++) {\n      rval = real[i];\n      ival = imag[i];\n      mag = <f32>bSi * <f32>Math.sqrt(rval * rval + ival * ival);\n\n      if (mag > this.peak) {\n          this.peakBand = i;\n          this.peak = mag;\n      }\n      spectrum[i] = mag;\n    }\n    return spectrum;\n  }\n}\n\n// function makeImage(f: Uint8Array[]) {\n//   const image = new ImageData(f.length, f[0].length)\n//   for (let i = 0; i < image.data.length; i += 4) {\n//     const j = i / 4\n//     const x = j % f.length\n//     const y = Math.floor(j / f.length)\n//     image.data[i]     = heatMapRgb[f[x][y]][0]\n//     image.data[i + 1] = heatMapRgb[f[x][y]][1]\n//     image.data[i + 2] = heatMapRgb[f[x][y]][2]\n//     image.data[i + 3] = f[x][y] <= 2 ? 0 : 255\n//   }\n//   return image\n// }\n\nexport function getFrequencies(fftSamples: i32, channelOne: f32[], length: i32, sampleRate: i32, width: i32, frequencies: u8[]): u8[] {\n\n  if (!channelOne) {\n    throw new Error('Web Audio buffer is not available')\n  }\n\n  const uniqueSamplesPerPx = length / width;\n  const nOverlap = <i32>Math.max(0, Math.round(<f32>fftSamples - <f32>uniqueSamplesPerPx))\n\n  const fft = new FFT(fftSamples, sampleRate, .05)\n  let currentOffset: i32 = 0\n\n  while (currentOffset + fftSamples < length) {\n    const segment = channelOne.slice(\n        currentOffset,\n        currentOffset + fftSamples\n    )\n    const spectrum = fft.calculateSpectrum(segment)\n    for (let j: i32 = 0; j < fftSamples / 2; j++) {\n        frequencies[j * (currentOffset + 1)] = <u8>Math.max(-255, Math.log10(spectrum[j]) * 45)\n    }\n    currentOffset += fftSamples - nOverlap\n  }\n  // const resampled = resample(frequencies, width)\n  return frequencies\n}\n","export declare namespace JSMath {\n\n  export const E: f64;\n  export const LN2: f64;\n  export const LN10: f64;\n  export const LOG2E: f64;\n  export const LOG10E: f64;\n  export const PI: f64;\n  export const SQRT1_2: f64;\n  export const SQRT2: f64;\n\n  export function abs(x: f64): f64;\n  export function acos(x: f64): f64;\n  export function acosh(x: f64): f64;\n  export function asin(x: f64): f64;\n  export function asinh(x: f64): f64;\n  export function atan(x: f64): f64;\n  export function atan2(y: f64, x: f64): f64;\n  export function atanh(x: f64): f64;\n  export function cbrt(x: f64): f64;\n  export function ceil(x: f64): f64;\n  export function clz32(x: f64): f64;\n  export function cos(x: f64): f64;\n  export function cosh(x: f64): f64;\n  export function exp(x: f64): f64;\n  export function expm1(x: f64): f64;\n  export function floor(x: f64): f64;\n  export function fround(x: f64): f32;\n  export function hypot(value1: f64, value2: f64): f64; // TODO: rest\n  export function imul(a: f64, b: f64): f64;\n  export function log(x: f64): f64;\n  export function log10(x: f64): f64;\n  export function log1p(x: f64): f64;\n  export function log2(x: f64): f64;\n  export function max(value1: f64, value2: f64): f64; // TODO: rest\n  export function min(value1: f64, value2: f64): f64; // TODO: rest\n  export function pow(base: f64, exponent: f64): f64;\n  export function random(): f64;\n  export function round(x: f64): f64;\n  export function sign(x: f64): f64;\n  export function sin(x: f64): f64;\n  export function sinh(x: f64): f64;\n  export function sqrt(x: f64): f64;\n  export function tan(x: f64): f64;\n  export function tanh(x: f64): f64;\n  export function trunc(x: f64): f64;\n}\n\nimport {\n  abs as builtin_abs,\n  ceil as builtin_ceil,\n  clz as builtin_clz,\n  copysign as builtin_copysign,\n  floor as builtin_floor,\n  max as builtin_max,\n  min as builtin_min,\n  sqrt as builtin_sqrt,\n  trunc as builtin_trunc\n} from \"./builtins\";\n\n// SUN COPYRIGHT NOTICE\n//\n// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n// Developed at SunPro, a Sun Microsystems, Inc. business.\n// Permission to use, copy, modify, and distribute this software\n// is freely granted, provided that this notice is preserved.\n//\n// Applies to all functions marked with a comment referring here.\n\n// TODO: sin, cos, tan\n\nfunction R(z: f64): f64 { // Rational approximation of (asin(x)-x)/x^3\n  const                   // see: musl/src/math/asin.c and SUN COPYRIGHT NOTICE above\n    pS0 = reinterpret<f64>(0x3FC5555555555555), //  1.66666666666666657415e-01\n    pS1 = reinterpret<f64>(0xBFD4D61203EB6F7D), // -3.25565818622400915405e-01\n    pS2 = reinterpret<f64>(0x3FC9C1550E884455), //  2.01212532134862925881e-01\n    pS3 = reinterpret<f64>(0xBFA48228B5688F3B), // -4.00555345006794114027e-02\n    pS4 = reinterpret<f64>(0x3F49EFE07501B288), //  7.91534994289814532176e-04\n    pS5 = reinterpret<f64>(0x3F023DE10DFDF709), //  3.47933107596021167570e-05\n    qS1 = reinterpret<f64>(0xC0033A271C8A2D4B), // -2.40339491173441421878e+00\n    qS2 = reinterpret<f64>(0x40002AE59C598AC8), //  2.02094576023350569471e+00\n    qS3 = reinterpret<f64>(0xBFE6066C1B8D0159), // -6.88283971605453293030e-01\n    qS4 = reinterpret<f64>(0x3FB3B8C5B12E9282); //  7.70381505559019352791e-02\n  var p = z * (pS0 + z * (pS1 + z * (pS2 + z * (pS3 + z * (pS4 + z * pS5)))));\n  var q = 1.0 + z * (qS1 + z * (qS2 + z * (qS3 + z * qS4)));\n  return p / q;\n}\n\nfunction expo2(x: f64): f64 { // exp(x)/2 for x >= log(DBL_MAX)\n  const                       // see: musl/src/math/__expo2.c\n    k    = <u32>2043,\n    kln2 = reinterpret<f64>(0x40962066151ADD8B); // 0x1.62066151add8bp+10\n  var scale = reinterpret<f64>(<u64>((<u32>0x3FF + k / 2) << 20) << 32);\n  return NativeMath.exp(x - kln2) * scale * scale;\n}\n\nvar random_seeded = false;\nvar random_state0: u64;\nvar random_state1: u64;\n\nfunction murmurHash3(h: u64): u64 { // Force all bits of a hash block to avalanche\n  h ^= h >> 33;                     // see: https://github.com/aappleby/smhasher\n  h *= 0xFF51AFD7ED558CCD;\n  h ^= h >> 33;\n  h *= 0xC4CEB9FE1A85EC53;\n  h ^= h >> 33;\n  return h;\n}\n\nexport namespace NativeMath {\n\n  export const E       = reinterpret<f64>(0x4005BF0A8B145769); // 2.7182818284590452354\n  export const LN2     = reinterpret<f64>(0x3FE62E42FEFA39EF); // 0.69314718055994530942\n  export const LN10    = reinterpret<f64>(0x40026BB1BBB55516); // 2.30258509299404568402\n  export const LOG2E   = reinterpret<f64>(0x3FF71547652B82FE); // 1.4426950408889634074\n  export const LOG10E  = reinterpret<f64>(0x3FDBCB7B1526E50E); // 0.43429448190325182765\n  export const PI      = reinterpret<f64>(0x400921FB54442D18); // 3.14159265358979323846\n  export const SQRT1_2 = reinterpret<f64>(0x3FE6A09E667F3BCD); // 0.70710678118654752440\n  export const SQRT2   = reinterpret<f64>(0x3FF6A09E667F3BCD); // 1.41421356237309504880\n\n  @inline\n  export function abs(x: f64): f64 {\n    return builtin_abs<f64>(x);\n  }\n\n  export function acos(x: f64): f64 { // see: musl/src/math/acos.c and SUN COPYRIGHT NOTICE above\n    const\n      pio2_hi   = reinterpret<f64>(0x3FF921FB54442D18), // 1.57079632679489655800e+00\n      pio2_lo   = reinterpret<f64>(0x3C91A62633145C07), // 6.12323399573676603587e-17\n      Ox1p_120f = reinterpret<f32>(0x03800000);\n    var hx = <u32>(reinterpret<u64>(x) >> 32);\n    var ix = hx & 0x7FFFFFFF;\n    if (ix >= 0x3FF00000) {\n      let lx = <u32>reinterpret<u64>(x);\n      if ((ix - 0x3FF00000 | lx) == 0) {\n        if (hx >> 31) return 2 * pio2_hi + Ox1p_120f;\n        return 0;\n      }\n      return 0 / (x - x);\n    }\n    if (ix < 0x3FE00000) {\n      if (ix <= 0x3C600000) return pio2_hi + Ox1p_120f;\n      return pio2_hi - (x - (pio2_lo - x * R(x * x)));\n    }\n    var s: f64, w: f64, z: f64;\n    if (hx >> 31) {\n      z = (1.0 + x) * 0.5;\n      s = builtin_sqrt<f64>(z);\n      w = R(z) * s - pio2_lo;\n      return 2 * (pio2_hi - (s + w));\n    }\n    z = (1.0 - x) * 0.5;\n    s = builtin_sqrt<f64>(z);\n    var df = reinterpret<f64>(reinterpret<u64>(s) & 0xFFFFFFFF00000000);\n    var c = (z - df * df) / (s + df);\n    w = R(z) * s + c;\n    return 2 * (df + w);\n  }\n\n  export function acosh(x: f64): f64 { // see: musl/src/math/acosh.c\n    const s = reinterpret<f64>(0x3FE62E42FEFA39EF);\n    var e = reinterpret<u64>(x) >> 52 & 0x7FF;\n    if (e < 0x3FF + 1) return log1p(x - 1 + builtin_sqrt<f64>((x - 1) * (x - 1) + 2 * (x - 1)));\n    if (e < 0x3FF + 26) return log(2 * x - 1 / (x + builtin_sqrt<f64>(x * x - 1)));\n    return log(x) + s;\n  }\n\n  export function asin(x: f64): f64 { // see: musl/src/math/asin.c and SUN COPYRIGHT NOTICE above\n    const\n      pio2_hi   = reinterpret<f64>(0x3FF921FB54442D18), // 1.57079632679489655800e+00\n      pio2_lo   = reinterpret<f64>(0x3C91A62633145C07), // 6.12323399573676603587e-17\n      Ox1p_120f = reinterpret<f32>(0x03800000);\n    var hx = <u32>(reinterpret<u64>(x) >> 32);\n    var ix = hx & 0x7FFFFFFF;\n    if (ix >= 0x3FF00000) {\n      let lx = <u32>reinterpret<u64>(x);\n      if ((ix - 0x3FF00000 | lx) == 0) return x * pio2_hi + Ox1p_120f;\n      return 0 / (x - x);\n    }\n    if (ix < 0x3FE00000) {\n      if (ix < 0x3E500000 && ix >= 0x00100000) return x;\n      return x + x * R(x * x);\n    }\n    var z = (1.0 - builtin_abs<f64>(x)) * 0.5;\n    var s = builtin_sqrt<f64>(z);\n    var r = R(z);\n    if (ix >= 0x3FEF3333) x = pio2_hi - (2 * (s + s * r) - pio2_lo);\n    else {\n      let f = reinterpret<f64>(reinterpret<u64>(s) & 0xFFFFFFFF00000000);\n      let c = (z - f * f) / (s + f);\n      x = 0.5 * pio2_hi - (2 * s * r - (pio2_lo - 2 * c) - (0.5 * pio2_hi - 2 * f));\n    }\n    if (hx >> 31) return -x;\n    return x;\n  }\n\n  export function asinh(x: f64): f64 { // see: musl/src/math/asinh.c\n    const c = reinterpret<f64>(0x3FE62E42FEFA39EF); // 0.693147180559945309417232121458176568\n    var u = reinterpret<u64>(x);\n    var e = u >> 52 & 0x7FF;\n    var s = u >> 63;\n    u &= 0x7FFFFFFFFFFFFFFF;\n    x = reinterpret<f64>(u);\n    if (e >= 0x3FF + 26) x = log(x) + c;\n    else if (e >= 0x3FF + 1) x = log(2 * x + 1 / (builtin_sqrt<f64>(x * x + 1) + x));\n    else if (e >= 0x3FF - 26) x = log1p(x + x * x / (builtin_sqrt<f64>(x * x + 1) + 1));\n    return s ? -x : x;\n  }\n\n  export function atan(x: f64): f64 { // see musl/src/math/atan.c and SUN COPYRIGHT NOTICE above\n    const\n      atanhi0   = reinterpret<f64>(0x3FDDAC670561BB4F), //  4.63647609000806093515e-01\n      atanhi1   = reinterpret<f64>(0x3FE921FB54442D18), //  7.85398163397448278999e-01\n      atanhi2   = reinterpret<f64>(0x3FEF730BD281F69B), //  9.82793723247329054082e-01\n      atanhi3   = reinterpret<f64>(0x3FF921FB54442D18), //  1.57079632679489655800e+00\n      atanlo0   = reinterpret<f64>(0x3C7A2B7F222F65E2), //  2.26987774529616870924e-17\n      atanlo1   = reinterpret<f64>(0x3C81A62633145C07), //  3.06161699786838301793e-17\n      atanlo2   = reinterpret<f64>(0x3C7007887AF0CBBD), //  1.39033110312309984516e-17\n      atanlo3   = reinterpret<f64>(0x3C91A62633145C07), //  6.12323399573676603587e-17\n      aT0       = reinterpret<f64>(0x3FD555555555550D), //  3.33333333333329318027e-01\n      aT1       = reinterpret<f64>(0xBFC999999998EBC4), // -1.99999999998764832476e-01\n      aT2       = reinterpret<f64>(0x3FC24924920083FF), //  1.42857142725034663711e-01\n      aT3       = reinterpret<f64>(0xBFBC71C6FE231671), // -1.11111104054623557880e-01,\n      aT4       = reinterpret<f64>(0x3FB745CDC54C206E), //  9.09088713343650656196e-02\n      aT5       = reinterpret<f64>(0xBFB3B0F2AF749A6D), // -7.69187620504482999495e-02\n      aT6       = reinterpret<f64>(0x3FB10D66A0D03D51), //  6.66107313738753120669e-02\n      aT7       = reinterpret<f64>(0xBFADDE2D52DEFD9A), // -5.83357013379057348645e-02\n      aT8       = reinterpret<f64>(0x3FA97B4B24760DEB), //  4.97687799461593236017e-02\n      aT9       = reinterpret<f64>(0xBFA2B4442C6A6C2F), // -3.65315727442169155270e-02\n      aT10      = reinterpret<f64>(0x3F90AD3AE322DA11), //  1.62858201153657823623e-02\n      Ox1p_120f = reinterpret<f32>(0x03800000);\n    var ix = <u32>(reinterpret<u64>(x) >> 32);\n    var sign_ = ix >> 31;\n    ix &= 0x7FFFFFFF;\n    var z: f64;\n    if (ix >= 0x44100000) {\n      if (isNaN(x)) return x;\n      z = atanhi3 + Ox1p_120f;\n      return sign_ ? -z : z;\n    }\n    var id: i32;\n    if (ix < 0x3FDC0000) {\n      if (ix < 0x3E400000) return x;\n      id = -1;\n    } else {\n      x = builtin_abs<f64>(x);\n      if (ix < 0x3FF30000) {\n        if (ix < 0x3FE60000) {\n          id = 0;\n          x = (2.0 * x - 1.0) / (2.0 + x);\n        } else {\n          id = 1;\n          x = (x - 1.0) / (x + 1.0);\n        }\n      } else {\n        if (ix < 0x40038000) {\n          id = 2;\n          x = (x - 1.5) / (1.0 + 1.5 * x);\n        } else {\n          id = 3;\n          x = -1.0 / x;\n        }\n      }\n    }\n    z = x * x;\n    var w = z * z;\n    var s1 = z * (aT0 + w * (aT2 + w * (aT4 + w * (aT6 + w * (aT8 + w * aT10)))));\n    var s2 = w * (aT1 + w * (aT3 + w * (aT5 + w * (aT7 + w * aT9))));\n    if (id < 0) return x - x * (s1 + s2);\n    switch (id) {\n      case 0: { z = atanhi0 - (x * (s1 + s2) - atanlo0 - x); break; }\n      case 1: { z = atanhi1 - (x * (s1 + s2) - atanlo1 - x); break; }\n      case 2: { z = atanhi2 - (x * (s1 + s2) - atanlo2 - x); break; }\n      case 3: { z = atanhi3 - (x * (s1 + s2) - atanlo3 - x); break; }\n      default: unreachable();\n    }\n    return sign_ ? -z : z;\n  }\n\n  export function atanh(x: f64): f64 { // see: musl/src/math/atanh.c\n    var u = reinterpret<u64>(x);\n    var e = u >> 52 & 0x7FF;\n    var s = u >> 63;\n    u &= 0x7FFFFFFFFFFFFFFF;\n    var y = reinterpret<f64>(u);\n    if (e < 0x3FF - 1) {\n      if (e >= 0x3FF - 32) y = 0.5 * log1p(2 * y + 2 * y * y / (1 - y));\n    } else {\n      y = 0.5 * log1p(2 * (y / (1 - y)));\n    }\n    return s ? -y : y;\n  }\n\n  export function atan2(y: f64, x: f64): f64 { // see: musl/src/math/atan2.c and SUN COPYRIGHT NOTICE above\n    const\n      pi    = reinterpret<f64>(0x400921FB54442D18), // 3.1415926535897931160E+00\n      pi_lo = reinterpret<f64>(0x3CA1A62633145C07); // 1.2246467991473531772E-16\n    if (isNaN(x) || isNaN(y)) return x + y;\n    var u = reinterpret<u64>(x);\n    var ix = <u32>(u >> 32);\n    var lx = <u32>u;\n    u = reinterpret<u64>(y);\n    var iy = <u32>(u >> 32);\n    var ly = <u32>u;\n    if ((ix - 0x3FF00000 | lx) == 0) return atan(y);\n    var m = ((iy >> 31) & 1) | ((ix >> 30) & 2);\n    ix = ix & 0x7FFFFFFF;\n    iy = iy & 0x7FFFFFFF;\n    if ((iy | ly) == 0) {\n      switch (m) {\n        case 0:\n        case 1: return  y;\n        case 2: return  PI;\n        case 3: return -PI;\n      }\n    }\n    if ((ix | lx) == 0) return m & 1 ? -pi / 2 : pi / 2;\n    if (ix == 0x7FF00000) {\n      if (iy == 0x7FF00000) {\n        switch (m) {\n          case 0: return  pi / 4;\n          case 1: return -pi / 4;\n          case 2: return  3 * pi / 4;\n          case 3: return -3 * pi / 4;\n        }\n      } else {\n        switch (m) {\n          case 0: return  0.0;\n          case 1: return -0.0;\n          case 2: return  pi;\n          case 3: return -pi;\n        }\n      }\n    }\n    var z: f64;\n    if (ix + (64 << 20) < iy || iy == 0x7FF00000) return m & 1 ? -pi / 2 : pi / 2;\n    if ((m & 2) && iy + (64 << 20) < ix) z = 0;\n    else z = atan(builtin_abs<f64>(y / x));\n    switch (m) {\n      case 0: return  z;\n      case 1: return -z;\n      case 2: return pi - (z - pi_lo);\n      case 3: return (z - pi_lo) - pi;\n    }\n    unreachable();\n    return 0;\n  }\n\n  export function cbrt(x: f64): f64 { // see: musl/src/math/cbrt.c and SUN COPYRIGHT NOTICE above\n    const\n      B1     = <u32>715094163,\n      B2     = <u32>696219795,\n      P0     = reinterpret<f64>(0x3FFE03E60F61E692), //  1.87595182427177009643\n      P1     = reinterpret<f64>(0xBFFE28E092F02420), // -1.88497979543377169875\n      P2     = reinterpret<f64>(0x3FF9F1604A49D6C2), //  1.621429720105354466140\n      P3     = reinterpret<f64>(0xBFE844CBBEE751D9), // -0.758397934778766047437\n      P4     = reinterpret<f64>(0x3FC2B000D4E4EDD7), //  0.145996192886612446982\n      Ox1p54 = reinterpret<f64>(0x4350000000000000);\n    var u = reinterpret<u64>(x);\n    var hx = <u32>(u >> 32) & 0x7FFFFFFF;\n    if (hx >= 0x7FF00000) return x + x;\n    if (hx < 0x00100000) {\n      u = reinterpret<u64>(x * Ox1p54);\n      hx = <u32>(u >> 32) & 0x7FFFFFFF;\n      if (hx == 0) return x;\n      hx = hx / 3 + B2;\n    } else {\n      hx = hx / 3 + B1;\n    }\n    u &= 1 << 63;\n    u |= <u64>hx << 32;\n    var t = reinterpret<f64>(u);\n    var r = (t * t) * (t / x);\n    t = t * ((P0 + r * (P1 + r * P2)) + ((r * r) * r) * (P3 + r * P4));\n    t = reinterpret<f64>((reinterpret<u64>(t) + 0x80000000) & 0xFFFFFFFFC0000000);\n    var s = t * t;\n    r = x / s;\n    var w = t + t;\n    r = (r - t) / (w + r);\n    t = t + t * r;\n    return t;\n  }\n\n  @inline\n  export function ceil(x: f64): f64 {\n    return builtin_ceil<f64>(x);\n  }\n\n  @inline\n  export function clz32(x: f64): f64 {\n    return <f64>builtin_clz<i32>(<i32>x);\n  }\n\n  export function cos(x: f64): f64 { // TODO\n    unreachable();\n    return 0;\n  }\n\n  export function cosh(x: f64): f64 { // see: musl/src/math/cosh.c\n    var u = reinterpret<u64>(x);\n    u &= 0x7FFFFFFFFFFFFFFF;\n    x = reinterpret<f64>(u);\n    var w = <u32>(u >> 32);\n    var t: f64;\n    if (w < 0x3FE62E42) {\n      if (w < 0x3FF00000 - (26 << 20)) return 1;\n      t = expm1(x);\n      return 1 + t * t / (2 * (1 + t));\n    }\n    if (w < 0x40862E42) {\n      t = exp(x);\n      return 0.5 * (t + 1 / t);\n    }\n    t = expo2(x);\n    return t;\n  }\n\n  export function exp(x: f64): f64 { // see: musl/src/math/exp.c and SUN COPYRIGHT NOTICE above\n    const\n      ln2hi     = reinterpret<f64>(0x3FE62E42FEE00000), //  6.93147180369123816490e-01\n      ln2lo     = reinterpret<f64>(0x3DEA39EF35793C76), //  1.90821492927058770002e-10\n      invln2    = reinterpret<f64>(0x3FF71547652B82FE), //  1.44269504088896338700e+00\n      P1        = reinterpret<f64>(0x3FC555555555553E), //  1.66666666666666019037e-01\n      P2        = reinterpret<f64>(0xBF66C16C16BEBD93), // -2.77777777770155933842e-03\n      P3        = reinterpret<f64>(0x3F11566AAF25DE2C), //  6.61375632143793436117e-05\n      P4        = reinterpret<f64>(0xBEBBBD41C5D26BF1), // -1.65339022054652515390e-06\n      P5        = reinterpret<f64>(0x3E66376972BEA4D0), //  4.13813679705723846039e-08\n      overflow  = reinterpret<f64>(0x40862E42FEFA39EF), //  709.782712893383973096\n      underflow = reinterpret<f64>(0xC0874910D52D3051), // -745.13321910194110842\n      Ox1p1023  = reinterpret<f64>(0x7FE0000000000000);\n    var hx = <u32>(reinterpret<u64>(x) >> 32);\n    var sign_ = <i32>(hx >> 31);\n    hx &= 0x7FFFFFFF;\n    if (hx >= 0x4086232B) {\n      if (isNaN(x)) return x;\n      if (x > overflow) {\n        x *= Ox1p1023;\n        return x;\n      }\n      if (x < underflow) return 0;\n    }\n    var hi: f64, lo: f64 = 0;\n    var k: i32 = 0;\n    if (hx > 0x3FD62E42) {\n      if (hx >= 0x3FF0A2B2) {\n        k = <i32>(invln2 * x + builtin_copysign<f64>(0.5, x));\n      } else {\n        k = 1 - sign_ - sign_;\n      }\n      hi = x - k * ln2hi;\n      lo = k * ln2lo;\n      x = hi - lo;\n    } else if (hx > 0x3E300000) {\n      hi = x;\n    } else return 1.0 + x;\n    var xx = x * x;\n    var c = x - xx * (P1 + xx * (P2 + xx * (P3 + xx * (P4 + xx * P5))));\n    var y = 1.0 + (x * c / (2 - c) - lo + hi);\n    if (k == 0) return y;\n    return scalbn(y, k);\n  }\n\n  export function expm1(x: f64): f64 { // see: musl/src/math/expm1.c and SUN COPYRIGHT NOTICE above\n    const\n      o_threshold = reinterpret<f64>(0x40862E42FEFA39EF), //  7.09782712893383973096e+02\n      ln2_hi      = reinterpret<f64>(0x3FE62E42FEE00000), //  6.93147180369123816490e-01\n      ln2_lo      = reinterpret<f64>(0x3DEA39EF35793C76), //  1.90821492927058770002e-10\n      invln2      = reinterpret<f64>(0x3FF71547652B82FE), //  1.44269504088896338700e+00\n      Q1          = reinterpret<f64>(0xBFA11111111110F4), // -3.33333333333331316428e-02\n      Q2          = reinterpret<f64>(0x3F5A01A019FE5585), //  1.58730158725481460165e-03\n      Q3          = reinterpret<f64>(0xBF14CE199EAADBB7), // -7.93650757867487942473e-05\n      Q4          = reinterpret<f64>(0x3ED0CFCA86E65239), //  4.00821782732936239552e-06\n      Q5          = reinterpret<f64>(0xBE8AFDB76E09C32D), // -2.01099218183624371326e-07\n      Ox1p1023    = reinterpret<f64>(0x7FE0000000000000);\n    var u = reinterpret<u64>(x);\n    var hx = <u32>(u >> 32 & 0x7FFFFFFF);\n    var k = 0, sign_ = <i32>(u >> 63);\n    if (hx >= 0x4043687A) {\n      if (isNaN(x)) return x;\n      if (sign_) return -1;\n      if (x > o_threshold) {\n        x *= Ox1p1023;\n        return x;\n      }\n    }\n    var c = 0.0, t: f64;\n    if (hx > 0x3FD62E42) {\n      let hi: f64, lo: f64;\n      if (hx < 0x3FF0A2B2) {\n        if (!sign_) {\n          hi = x - ln2_hi;\n          lo = ln2_lo;\n          k =  1;\n        } else {\n          hi = x + ln2_hi;\n          lo = -ln2_lo;\n          k = -1;\n        }\n      } else {\n        k  = <i32>(invln2 * x + (sign_ ? -0.5 : 0.5));\n        t  = <f64>k;\n        hi = x - t * ln2_hi;\n        lo = t * ln2_lo;\n      }\n      x = hi - lo;\n      c = (hi - x) - lo;\n    } else if (hx < 0x3C900000) return x;\n    var hfx = 0.5 * x;\n    var hxs = x * hfx;\n    var r1 = 1.0 + hxs * (Q1 + hxs * (Q2 + hxs * (Q3 + hxs * (Q4 + hxs * Q5))));\n    t = 3.0 - r1 * hfx;\n    var e = hxs * ((r1 - t) / (6.0 - x * t));\n    if (k == 0) return x - (x * e - hxs);\n    e = x * (e - c) - c;\n    e -= hxs;\n    if (k == -1) return 0.5 * (x - e) - 0.5;\n    if (k == 1) {\n      if (x < -0.25) return -2.0 * (e - (x + 0.5));\n      return 1.0 + 2.0 * (x - e);\n    }\n    u = (0x3FF + k) << 52;\n    var twopk = reinterpret<f64>(u);\n    var y: f64;\n    if (k < 0 || k > 56) {\n      y = x - e + 1.0;\n      if (k == 1024) y = y * 2.0 * Ox1p1023;\n      else y = y * twopk;\n      return y - 1.0;\n    }\n    u = (0x3FF - k) << 52;\n    if (k < 20) y = (x - e + (1 - reinterpret<f64>(u))) * twopk;\n    else y = (x - (e + reinterpret<f64>(u)) + 1) * twopk;\n    return y;\n  }\n\n  @inline\n  export function floor(x: f64): f64 {\n    return builtin_floor<f64>(x);\n  }\n\n  @inline\n  export function fround(x: f64): f32 {\n    return <f32>x;\n  }\n\n  export function hypot(x: f64, y: f64): f64 { // see: musl/src/math/hypot.c\n    const\n      SPLIT    = reinterpret<f64>(0x41A0000000000000) + 1, // 0x1p27 + 1\n      Ox1p700  = reinterpret<f64>(0x6BB0000000000000),\n      Ox1p_700 = reinterpret<f64>(0x1430000000000000);\n    var ux = reinterpret<u64>(x);\n    var uy = reinterpret<u64>(y);\n    ux &= 0x7FFFFFFFFFFFFFFF;\n    uy &= 0x7FFFFFFFFFFFFFFF;\n    if (ux < uy) {\n      let ut = ux;\n      ux = uy;\n      uy = ut;\n    }\n    var ex = <i32>(ux >> 52);\n    var ey = <i32>(uy >> 52);\n    y = reinterpret<f64>(uy);\n    if (ey == 0x7FF) return y;\n    x = reinterpret<f64>(ux);\n    if (ex == 0x7FF || uy == 0) return x;\n    if (ex - ey > 64) return x + y;\n    var z = 1.0;\n    if (ex > 0x3FF + 510) {\n      z  = Ox1p700;\n      x *= Ox1p_700;\n      y *= Ox1p_700;\n    } else if (ey < 0x3FF - 450) {\n      z  = Ox1p_700;\n      x *= Ox1p700;\n      y *= Ox1p700;\n    }\n    var c = x * SPLIT;\n    var h = x - c + c;\n    var l = x - h;\n    var hx = x * x;\n    var lx = h * h - hx + 2 * h * l + l * l;\n    c = y * SPLIT;\n    h = y - c + c;\n    l = y - h;\n    var hy = y * y;\n    var ly = h * h - hy + 2 * h * l + l * l;\n    return z * builtin_sqrt(ly + lx + hy + hx);\n  }\n\n  export function imul(x: f64, y: f64): f64 {\n    return <f64>(<i32>x * <i32>y);\n  }\n\n  export function log(x: f64): f64 { // see: musl/src/math/log.c and SUN COPYRIGHT NOTICE above\n    const\n      ln2_hi = reinterpret<f64>(0x3FE62E42FEE00000), // 6.93147180369123816490e-01\n      ln2_lo = reinterpret<f64>(0x3DEA39EF35793C76), // 1.90821492927058770002e-10\n      Lg1    = reinterpret<f64>(0x3FE5555555555593), // 6.666666666666735130e-01\n      Lg2    = reinterpret<f64>(0x3FD999999997FA04), // 3.999999999940941908e-01\n      Lg3    = reinterpret<f64>(0x3FD2492494229359), // 2.857142874366239149e-01\n      Lg4    = reinterpret<f64>(0x3FCC71C51D8E78AF), // 2.222219843214978396e-01\n      Lg5    = reinterpret<f64>(0x3FC7466496CB03DE), // 1.818357216161805012e-01\n      Lg6    = reinterpret<f64>(0x3FC39A09D078C69F), // 1.531383769920937332e-01\n      Lg7    = reinterpret<f64>(0x3FC2F112DF3E5244), // 1.479819860511658591e-01\n      Ox1p54 = reinterpret<f64>(0x4350000000000000);\n    var u = reinterpret<u64>(x);\n    var hx = <u32>(u >> 32);\n    var k = 0;\n    if (hx < 0x00100000 || <bool>(hx >> 31)) {\n      if (u << 1 == 0) return -1 / (x * x);\n      if (hx >> 31)     return (x - x) / 0.0;\n      k -= 54;\n      x *= Ox1p54;\n      u = reinterpret<u64>(x);\n      hx = <u32>(u >> 32);\n    } else if (hx >= 0x7FF00000) return x;\n      else if (hx == 0x3FF00000 && u << 32 == 0) return 0;\n    hx += 0x3FF00000 - 0x3FE6A09E;\n    k += (<i32>hx >> 20) - 0x3FF;\n    hx = (hx & 0x000FFFFF) + 0x3FE6A09E;\n    u = <u64>hx << 32 | (u & 0xFFFFFFFF);\n    x = reinterpret<f64>(u);\n    var f = x - 1.0;\n    var hfsq = 0.5 * f * f;\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * (Lg4 + w * Lg6));\n    var t2 = z * (Lg1 + w * (Lg3 + w * (Lg5 + w * Lg7)));\n    var r = t2 + t1;\n    var dk = k;\n    return s * (hfsq + r) + dk * ln2_lo - hfsq + f + dk * ln2_hi;\n  }\n\n  export function log10(x: f64): f64 { // see: musl/src/math/log10.c and SUN COPYRIGHT NOTICE above\n    const\n      ivln10hi  = reinterpret<f64>(0x3FDBCB7B15200000), // 4.34294481878168880939e-01\n      ivln10lo  = reinterpret<f64>(0x3DBB9438CA9AADD5), // 2.50829467116452752298e-11\n      log10_2hi = reinterpret<f64>(0x3FD34413509F6000), // 3.01029995663611771306e-01\n      log10_2lo = reinterpret<f64>(0x3D59FEF311F12B36), // 3.69423907715893078616e-13\n      Lg1       = reinterpret<f64>(0x3FE5555555555593), // 6.666666666666735130e-01\n      Lg2       = reinterpret<f64>(0x3FD999999997FA04), // 3.999999999940941908e-01\n      Lg3       = reinterpret<f64>(0x3FD2492494229359), // 2.857142874366239149e-01\n      Lg4       = reinterpret<f64>(0x3FCC71C51D8E78AF), // 2.222219843214978396e-01\n      Lg5       = reinterpret<f64>(0x3FC7466496CB03DE), // 1.818357216161805012e-01\n      Lg6       = reinterpret<f64>(0x3FC39A09D078C69F), // 1.531383769920937332e-01\n      Lg7       = reinterpret<f64>(0x3FC2F112DF3E5244), // 1.479819860511658591e-01\n      Ox1p54    = reinterpret<f64>(0x4350000000000000);\n    var u = reinterpret<u64>(x);\n    var hx = <u32>(u >> 32);\n    var k = 0;\n    if (hx < 0x00100000 || <bool>(hx >> 31)) {\n      if (u << 1 == 0) return -1 / (x * x);\n      if (hx >> 31) return (x - x) / 0.0;\n      k -= 54;\n      x *= Ox1p54;\n      u = reinterpret<u64>(x);\n      hx = <u32>(u >> 32);\n    } else if (hx >= 0x7FF00000) return x;\n      else if (hx == 0x3FF00000 && u << 32 == 0) return 0;\n    hx += 0x3FF00000 - 0x3FE6A09E;\n    k += <i32>(hx >> 20) - 0x3FF;\n    hx = (hx & 0x000FFFFF) + 0x3FE6A09E;\n    u = <u64>hx << 32 | (u & 0xFFFFFFFF);\n    x = reinterpret<f64>(u);\n    var f = x - 1.0;\n    var hfsq = 0.5 * f * f;\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * (Lg4 + w * Lg6));\n    var t2 = z * (Lg1 + w * (Lg3 + w * (Lg5 + w * Lg7)));\n    var r = t2 + t1;\n    var hi = f - hfsq;\n    u = reinterpret<u64>(hi);\n    u &= 0xFFFFFFFF00000000;\n    hi = reinterpret<f64>(u);\n    var lo = f - hi - hfsq + s * (hfsq + r);\n    var val_hi = hi * ivln10hi;\n    var dk = <f64>k;\n    var y = dk * log10_2hi;\n    var val_lo = dk * log10_2lo + (lo + hi) * ivln10lo + lo * ivln10hi;\n    w = y + val_hi;\n    val_lo += (y - w) + val_hi;\n    val_hi = w;\n    return val_lo + val_hi;\n  }\n\n  export function log1p(x: f64): f64 { // see: musl/src/math/log1p.c and SUN COPYRIGHT NOTICE above\n    const\n      ln2_hi = reinterpret<f64>(0x3FE62E42FEE00000), // 6.93147180369123816490e-01\n      ln2_lo = reinterpret<f64>(0x3DEA39EF35793C76), // 1.90821492927058770002e-10\n      Lg1    = reinterpret<f64>(0x3FE5555555555593), // 6.666666666666735130e-01\n      Lg2    = reinterpret<f64>(0x3FD999999997FA04), // 3.999999999940941908e-01\n      Lg3    = reinterpret<f64>(0x3FD2492494229359), // 2.857142874366239149e-01\n      Lg4    = reinterpret<f64>(0x3FCC71C51D8E78AF), // 2.222219843214978396e-01\n      Lg5    = reinterpret<f64>(0x3FC7466496CB03DE), // 1.818357216161805012e-01\n      Lg6    = reinterpret<f64>(0x3FC39A09D078C69F), // 1.531383769920937332e-01\n      Lg7    = reinterpret<f64>(0x3FC2F112DF3E5244); // 1.479819860511658591e-01\n    var u = reinterpret<u64>(x);\n    var hx = <u32>(u >> 32);\n    var k = 1;\n    var c = 0.0, f = 0.0;\n    if (hx < 0x3FDA827A || <bool>(hx >> 31)) {\n      if (hx >= 0xBFF00000) {\n        if (x == -1) return x / 0.0;\n        return (x - x) / 0.0;\n      }\n      if (hx << 1 < 0x3CA00000 << 1) return x;\n      if (hx <= 0xBFD2BEC4) {\n        k = 0;\n        c = 0;\n        f = x;\n      }\n    } else if (hx >= 0x7FF00000) return x;\n    if (k) {\n      u = reinterpret<u64>(1 + x);\n      let hu = <u32>(u >> 32);\n      hu += 0x3FF00000 - 0x3FE6A09E;\n      k = <i32>(hu >> 20) - 0x3FF;\n      if (k < 54) {\n        let uf = reinterpret<f64>(u);\n        c = k >= 2 ? 1 - (uf - x) : x - (uf - 1);\n        c /= uf;\n      } else c = 0;\n      hu = (hu & 0x000FFFFF) + 0x3FE6A09E;\n      u = <u64>hu << 32 | (u & 0xFFFFFFFF);\n      f = reinterpret<f64>(u) - 1;\n    }\n    var hfsq = 0.5 * f * f;\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * (Lg4 + w * Lg6));\n    var t2 = z * (Lg1 + w * (Lg3 + w * (Lg5 + w * Lg7)));\n    var r = t2 + t1;\n    var dk = <f64>k;\n    return s * (hfsq + r) + (dk * ln2_lo + c) - hfsq + f + dk * ln2_hi;\n  }\n\n  export function log2(x: f64): f64 { // see: musl/src/math/log2.c and SUN COPYRIGHT NOTICE above\n    const\n      ivln2hi = reinterpret<f64>(0x3FF7154765200000), // 1.44269504072144627571e+00\n      ivln2lo = reinterpret<f64>(0x3DE705FC2EEFA200), // 1.67517131648865118353e-10\n      Lg1     = reinterpret<f64>(0x3FE5555555555593), // 6.666666666666735130e-01\n      Lg2     = reinterpret<f64>(0x3FD999999997FA04), // 3.999999999940941908e-01\n      Lg3     = reinterpret<f64>(0x3FD2492494229359), // 2.857142874366239149e-01\n      Lg4     = reinterpret<f64>(0x3FCC71C51D8E78AF), // 2.222219843214978396e-01\n      Lg5     = reinterpret<f64>(0x3FC7466496CB03DE), // 1.818357216161805012e-01\n      Lg6     = reinterpret<f64>(0x3FC39A09D078C69F), // 1.531383769920937332e-01\n      Lg7     = reinterpret<f64>(0x3FC2F112DF3E5244), // 1.479819860511658591e-01\n      Ox1p54  = reinterpret<f64>(0x4350000000000000);\n    var u = reinterpret<u64>(x);\n    var hx = <u32>(u >> 32);\n    var k = 0;\n    if (hx < 0x00100000 || <bool>(hx >> 31)) {\n      if (u << 1 == 0) return -1 / (x * x);\n      if (hx >> 31) return (x - x) / 0.0;\n      k -= 54;\n      x *= Ox1p54;\n      u = reinterpret<u64>(x);\n      hx = <u32>(u >> 32);\n    } else if (hx >= 0x7FF00000) return x;\n      else if (hx == 0x3FF00000 && u << 32 == 0) return 0;\n    hx += 0x3FF00000 - 0x3FE6A09E;\n    k += <i32>(hx >> 20) - 0x3FF;\n    hx = (hx & 0x000FFFFF) + 0x3FE6A09E;\n    u = <u64>hx << 32 | (u & 0xFFFFFFFF);\n    x = reinterpret<f64>(u);\n    var f = x - 1.0;\n    var hfsq = 0.5 * f * f;\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * (Lg4 + w * Lg6));\n    var t2 = z * (Lg1 + w * (Lg3 + w * (Lg5 + w * Lg7)));\n    var r = t2 + t1;\n    var hi = f - hfsq;\n    u = reinterpret<u64>(hi);\n    u &= 0xFFFFFFFF00000000;\n    hi = reinterpret<f64>(u);\n    var lo = f - hi - hfsq + s * (hfsq + r);\n    var val_hi = hi * ivln2hi;\n    var val_lo = (lo + hi) * ivln2lo + lo * ivln2hi;\n    var y = <f64>k;\n    w = y + val_hi;\n    val_lo += (y - w) + val_hi;\n    val_hi = w;\n    return val_lo + val_hi;\n  }\n\n  @inline\n  export function max(value1: f64, value2: f64): f64 {\n    return builtin_max<f64>(value1, value2);\n  }\n\n  @inline\n  export function min(value1: f64, value2: f64): f64 {\n    return builtin_min<f64>(value1, value2);\n  }\n\n  export function pow(x: f64, y: f64): f64 { // see: musl/src/math/pow.c and SUN COPYRIGHT NOTICE above\n    const\n      dp_h1   = reinterpret<f64>(0x3FE2B80340000000), //  5.84962487220764160156e-01\n      dp_l1   = reinterpret<f64>(0x3E4CFDEB43CFD006), //  1.35003920212974897128e-08\n      two53   = reinterpret<f64>(0x4340000000000000), //  9007199254740992.0\n      huge    = reinterpret<f64>(0x7E37E43C8800759C), //  1e+300\n      tiny    = reinterpret<f64>(0x01A56E1FC2F8F359), //  1e-300\n      L1      = reinterpret<f64>(0x3FE3333333333303), //  5.99999999999994648725e-01\n      L2      = reinterpret<f64>(0x3FDB6DB6DB6FABFF), //  4.28571428578550184252e-01\n      L3      = reinterpret<f64>(0x3FD55555518F264D), //  3.33333329818377432918e-01\n      L4      = reinterpret<f64>(0x3FD17460A91D4101), //  2.72728123808534006489e-01\n      L5      = reinterpret<f64>(0x3FCD864A93C9DB65), //  2.30660745775561754067e-01\n      L6      = reinterpret<f64>(0x3FCA7E284A454EEF), //  2.06975017800338417784e-01\n      P1      = reinterpret<f64>(0x3FC555555555553E), //  1.66666666666666019037e-01\n      P2      = reinterpret<f64>(0xBF66C16C16BEBD93), // -2.77777777770155933842e-03\n      P3      = reinterpret<f64>(0x3F11566AAF25DE2C), //  6.61375632143793436117e-05\n      P4      = reinterpret<f64>(0xBEBBBD41C5D26BF1), // -1.65339022054652515390e-06\n      P5      = reinterpret<f64>(0x3E66376972BEA4D0), //  4.13813679705723846039e-08\n      lg2     = reinterpret<f64>(0x3FE62E42FEFA39EF), //  6.93147180559945286227e-01\n      lg2_h   = reinterpret<f64>(0x3FE62E4300000000), //  6.93147182464599609375e-01\n      lg2_l   = reinterpret<f64>(0xBE205C610CA86C39), // -1.90465429995776804525e-09\n      ovt     = reinterpret<f64>(0x3C971547652B82FE), //  8.0085662595372944372e-017\n      cp      = reinterpret<f64>(0x3FEEC709DC3A03FD), //  9.61796693925975554329e-01\n      cp_h    = reinterpret<f64>(0x3FEEC709E0000000), //  9.61796700954437255859e-01\n      cp_l    = reinterpret<f64>(0xBE3E2FE0145B01F5), // -7.02846165095275826516e-09\n      ivln2   = reinterpret<f64>(0x3FF71547652B82FE), //  1.44269504088896338700e+00\n      ivln2_h = reinterpret<f64>(0x3FF7154760000000), //  1.44269502162933349609e+00\n      ivln2_l = reinterpret<f64>(0x3E54AE0BF85DDF44); //  1.92596299112661746887e-08\n    var u_ = reinterpret<u64>(x);\n    var hx = <i32>(u_ >> 32);\n    var lx = <u32>u_;\n    u_ = reinterpret<u64>(y);\n    var hy = <i32>(u_ >> 32);\n    var ly = <u32>u_;\n    var ix = hx & 0x7FFFFFFF;\n    var iy = hy & 0x7FFFFFFF;\n    if ((iy | ly) == 0) return 1.0; // x**0 = 1, even if x is NaN\n    // if (hx == 0x3FF00000 && lx == 0) return 1.0; // C: 1**y = 1, even if y is NaN, JS: NaN\n    if ( // NaN if either arg is NaN\n      ix > 0x7FF00000 || (ix == 0x7FF00000 && lx != 0) ||\n      iy > 0x7FF00000 || (iy == 0x7FF00000 && ly != 0)\n    ) return x + y;\n    var yisint = 0, k: i32;\n    if (hx < 0) {\n      if (iy >= 0x43400000) yisint = 2;\n      else if (iy >= 0x3FF00000) {\n        k = (iy >> 20) - 0x3FF;\n        if (k > 20) {\n          let jj = ly >> (52 - k);\n          if ((jj << (52 - k)) == ly) yisint = 2 - (jj & 1);\n        } else if (ly == 0) {\n          let jj = iy >> (20 - k);\n          if ((jj << (20 - k)) == iy) yisint = 2 - (jj & 1);\n        }\n      }\n    }\n    if (ly == 0) {\n      if (iy == 0x7FF00000) { // y is +-inf\n        if (((ix - 0x3FF00000) | lx) == 0) return NaN; // C: (-1)**+-inf is 1, JS: NaN\n        else if (ix >= 0x3FF00000) return hy >= 0 ? y : 0.0; // (|x|>1)**+-inf = inf,0\n        else return hy >= 0 ? 0.0 : -y; // (|x|<1)**+-inf = 0,inf\n      }\n      if (iy == 0x3FF00000) {\n        if (hy >= 0) return x;\n        return 1 / x;\n      }\n      if (hy == 0x40000000) return x * x;\n      if (hy == 0x3FE00000) {\n        if (hx >= 0) return builtin_sqrt(x);\n      }\n    }\n    var ax = builtin_abs<f64>(x), z: f64;\n    if (lx == 0) {\n      if (ix == 0x7FF00000 || ix == 0 || ix == 0x3FF00000) {\n        z = ax;\n        if (hy < 0) z = 1.0 / z;\n        if (hx < 0) {\n          if (((ix - 0x3FF00000) | yisint) == 0) z = (z - z) / (z - z);\n          else if (yisint == 1) z = -z;\n        }\n        return z;\n      }\n    }\n    var s = 1.0;\n    if (hx < 0) {\n      if (yisint == 0) return (x - x) / (x - x);\n      if (yisint == 1) s = -1.0;\n    }\n    var t1: f64, t2: f64, p_h: f64, p_l: f64, r: f64, t: f64, u: f64, v: f64, w: f64;\n    var j: i32, n: i32;\n    if (iy > 0x41E00000) {\n      if (iy > 0x43F00000) {\n        if (ix <= 0x3FEFFFFF) return hy < 0 ? huge * huge : tiny * tiny;\n        if (ix >= 0x3FF00000) return hy > 0 ? huge * huge : tiny * tiny;\n      }\n      if (ix < 0x3FEFFFFF) return hy < 0 ? s * huge * huge : s * tiny * tiny;\n      if (ix > 0x3FF00000) return hy > 0 ? s * huge * huge : s * tiny * tiny;\n      t = ax - 1.0;\n      w = (t * t) * (0.5 - t * (0.3333333333333333333333 - t * 0.25));\n      u = ivln2_h * t;\n      v = t * ivln2_l - w * ivln2;\n      t1 = u + v;\n      t1 = reinterpret<f64>(reinterpret<u64>(t1) & 0xFFFFFFFF00000000);\n      t2 = v - (t1 - u);\n    } else {\n      let ss: f64, s2: f64, s_h: f64, s_l: f64, t_h: f64, t_l: f64;\n      n = 0;\n      if (ix < 0x00100000) {\n        ax *= two53;\n        n -= 53;\n        ix = <u32>(reinterpret<u64>(ax) >> 32);\n      }\n      n += (ix >> 20) - 0x3FF;\n      j = ix & 0x000FFFFF;\n      ix = j | 0x3FF00000;\n      if (j <= 0x3988E) k = 0;\n      else if (j < 0xBB67A) k = 1;\n      else {\n        k = 0;\n        n += 1;\n        ix -= 0x00100000;\n      }\n      ax = reinterpret<f64>(reinterpret<u64>(ax) & 0xFFFFFFFF | (<u64>ix << 32));\n      let bp = select<f64>(1.5, 1.0, k);\n      u = ax - bp;\n      v = 1.0 / (ax + bp);\n      ss = u * v;\n      s_h = ss;\n      s_h = reinterpret<f64>(reinterpret<u64>(s_h) & 0xFFFFFFFF00000000);\n      t_h = reinterpret<f64>(<u64>(((ix >> 1) | 0x20000000) + 0x00080000 + (k << 18)) << 32);\n      t_l = ax - (t_h - bp);\n      s_l = v * ((u - s_h * t_h) - s_h * t_l);\n      s2 = ss * ss;\n      r = s2 * s2 * (L1 + s2 * (L2 + s2 * (L3 + s2 * (L4 + s2 * (L5 + s2 * L6)))));\n      r += s_l * (s_h + ss);\n      s2 = s_h * s_h;\n      t_h = 3.0 + s2 + r;\n      t_h = reinterpret<f64>(reinterpret<u64>(t_h) & 0xFFFFFFFF00000000);\n      t_l = r - ((t_h - 3.0) - s2);\n      u = s_h * t_h;\n      v = s_l * t_h + t_l * ss;\n      p_h = u + v;\n      p_h = reinterpret<f64>(reinterpret<u64>(p_h) & 0xFFFFFFFF00000000);\n      p_l = v - (p_h - u);\n      let z_h = cp_h * p_h;\n      let dp_l = select<f64>(dp_l1, 0.0, k);\n      let z_l = cp_l * p_h + p_l * cp + dp_l;\n      t = <f64>n;\n      let dp_h = select<f64>(dp_h1, 0.0, k);\n      t1 = ((z_h + z_l) + dp_h) + t;\n      t1 = reinterpret<f64>(reinterpret<u64>(t1) & 0xFFFFFFFF00000000);\n      t2 = z_l - (((t1 - t) - dp_h) - z_h);\n    }\n    var y1 = y;\n    y1 = reinterpret<f64>(reinterpret<u64>(y1) & 0xFFFFFFFF00000000);\n    p_l = (y - y1) * t1 + y * t2;\n    p_h = y1 * t1;\n    z = p_l + p_h;\n    u_ = reinterpret<u64>(z);\n    j = <u32>(u_ >> 32);\n    var i = <i32>u_;\n    if (j >= 0x40900000) {\n      if (((j - 0x40900000) | i) != 0) return s * huge * huge;\n      if (p_l + ovt > z - p_h) return s * huge * huge;\n    } else if ((j & 0x7FFFFFFF) >= 0x4090CC00) {\n      if (((j - 0xC090CC00) | i) != 0) return s * tiny * tiny;\n      if (p_l <= z - p_h) return s * tiny * tiny;\n    }\n    i = j & 0x7FFFFFFF;\n    k = (i >> 20) - 0x3FF;\n    n = 0;\n    if (i > 0x3FE00000) {\n      n = j + (0x00100000 >> (k + 1));\n      k = ((n & 0x7FFFFFFF) >> 20) - 0x3FF;\n      t = 0.0;\n      t = reinterpret<f64>(<u64>(n & ~(0x000FFFFF >> k)) << 32);\n      n = ((n & 0x000FFFFF) | 0x00100000) >> (20 - k);\n      if (j < 0) n = -n;\n      p_h -= t;\n    }\n    t = p_l + p_h;\n    t = reinterpret<f64>(reinterpret<u64>(t) & 0xFFFFFFFF00000000);\n    u = t * lg2_h;\n    v = (p_l - (t - p_h)) * lg2 + t * lg2_l;\n    z = u + v;\n    w = v - (z - u);\n    t = z * z;\n    t1 = z - t * (P1 + t * (P2 + t * (P3 + t * (P4 + t * P5))));\n    r = (z * t1) / (t1 - 2.0) - (w + z * w);\n    z = 1.0 - (r - z);\n    j = <u32>(reinterpret<u64>(z) >> 32);\n    j += n << 20;\n    if ((j >> 20) <= 0) z = scalbn(z, n);\n    else z = reinterpret<f64>(reinterpret<u64>(z) & 0xFFFFFFFF | (<u64>j << 32));\n    return s * z;\n  }\n\n  export function seedRandom(value: i64): void {\n    assert(value);\n    random_seeded = true;\n    random_state0 = murmurHash3(value);\n    random_state1 = murmurHash3(random_state0);\n  }\n\n  export function random(): f64 { // see: v8/src/base/random-number-generator.cc\n    if (!random_seeded) throw new Error(\"PRNG must be seeded.\");\n    var s1 = random_state0;\n    var s0 = random_state1;\n    random_state0 = s0;\n    s1 ^= s1 << 23;\n    s1 ^= s1 >> 17;\n    s1 ^= s0;\n    s1 ^= s0 >> 26;\n    random_state1 = s1;\n    var r = ((s0 + s1) & 0x000FFFFFFFFFFFFF) | 0x3FF0000000000000;\n    return reinterpret<f64>(r) - 1;\n  }\n\n  export function round(x: f64): f64 { // see: musl/src/math/round.c\n    const toint = 1.0 / f64.EPSILON;\n    var ux = reinterpret<u64>(x);\n    var e = <i32>(ux >> 52 & 0x7FF);\n    if (e >= 0x3FF + 52) return x;\n    if (e < 0x3FF - 1) return 0 * x;\n    var y: f64;\n    if (ux >> 63) {\n      // FIXME: JS always rounds fractional 0.5 towards +Infinity\n      // and there certainly is a smarter way to do this.\n      y = toint - x - toint + x;\n      if (y >= 0.5) y = x - y + 1;\n      else if (y < -0.5) y = x - y - 1;\n      else y = x - y;\n    } else {\n      y = x + toint - toint - x;\n      if (y > 0.5) y = y + x - 1;\n      else if (y <= -0.5) y = y + x + 1;\n      else y = y + x;\n    }\n    return y;\n  }\n\n  @inline\n  export function sign(x: f64): f64 {\n    // return x > 0 ? 1 : x < 0 ? -1 : x;\n    return builtin_abs<f64>(x) > 0 ? builtin_copysign<f64>(1, x) : x;\n  }\n\n  export function sin(x: f64): f64 { // TODO\n    unreachable();\n    return 0;\n  }\n\n  export function sinh(x: f64): f64 { // see: musl/src/math/sinh.c\n    var u = reinterpret<u64>(x);\n    var h = 0.5;\n    if (u >> 63) h = -h;\n    u &=  0x7FFFFFFFFFFFFFFF;\n    var absx = reinterpret<f64>(u);\n    var w = <u32>(u >> 32);\n    var t: f64;\n    if (w < 0x40862E42) {\n      t = expm1(absx);\n      if (w < 0x3FF00000) {\n        if (w < 0x3FF00000 - (26 << 20)) return x;\n        return h * (2 * t - t * t / (t + 1));\n      }\n      return h * (t + t / (t + 1));\n    }\n    t = 2 * h * expo2(absx);\n    return t;\n  }\n\n  @inline\n  export function sqrt(x: f64): f64 {\n    return builtin_sqrt<f64>(x);\n  }\n\n  export function tan(x: f64): f64 { // TODO\n    unreachable();\n    return 0;\n  }\n\n  export function tanh(x: f64): f64 { // see: musl/src/math/tanh.c\n    var u = reinterpret<u64>(x);\n    var sign_ = <i32>(u >> 63);\n    u &= 0x7FFFFFFFFFFFFFFF;\n    x = reinterpret<f64>(u);\n    var w = <u32>(u >> 32);\n    var t: f64;\n    if (w > 0x3FE193EA) {\n      if (w > 0x40340000) {\n        t = 1 - 0 / x;\n      } else {\n        t = expm1(2 * x);\n        t = 1 - 2 / (t + 2);\n      }\n    } else if (w > 0x3FD058AE) {\n      t = expm1(2 * x);\n      t = t / (t + 2);\n    } else if (w >= 0x00100000) {\n      t = expm1(-2 * x);\n      t = -t / (t + 2);\n    } else t = x;\n    return sign_ ? -t : t;\n  }\n\n  @inline\n  export function trunc(x: f64): f64 {\n    return builtin_trunc<f64>(x);\n  }\n\n  /** @internal */\n  export function scalbn(x: f64, n: i32): f64 { // see: musl/src/math/scalbn.c\n    const\n      Ox1p1023  = reinterpret<f64>(0x7FE0000000000000),\n      Ox1p_1022 = reinterpret<f64>(0x0010000000000000);\n    var y = x;\n    if (n > 1023) {\n      y *= Ox1p1023;\n      n -= 1023;\n      if (n > 1023) {\n        y *= Ox1p1023;\n        n -= 1023;\n        if (n > 1023) n = 1023;\n      }\n    } else if (n < -1022) {\n      y *= Ox1p_1022;\n      n += 1022;\n      if (n < -1022) {\n        y *= Ox1p_1022;\n        n += 1022;\n        if (n < -1022) n = -1022;\n      }\n    }\n    return y * reinterpret<f64>(<u64>(0x3FF + n) << 52);\n  }\n\n  export function mod(x: f64, y: f64): f64 { // see: musl/src/math/fmod.c\n    var ux = reinterpret<u64>(x);\n    var uy = reinterpret<u64>(y);\n    var ex = <i32>(ux >> 52 & 0x7FF);\n    var ey = <i32>(uy >> 52 & 0x7FF);\n    var sx = <i32>(ux >> 63);\n    if (uy << 1 == 0 || isNaN<f64>(y) || ex == 0x7FF) return (x * y) / (x * y);\n    if (ux << 1 <= uy << 1) {\n      if (ux << 1 == uy << 1) return 0 * x;\n      return x;\n    }\n    var i: u64;\n    if (!ex) {\n      for (i = ux << 12; !(i >> 63); i <<= 1) --ex;\n      ux <<= -ex + 1;\n    } else {\n      ux &= <u64>-1 >> 12;\n      ux |= 1 << 52;\n    }\n    if (!ey) {\n      for (i = uy << 12; !(i >> 63); i <<= 1) --ey;\n      uy <<= -ey + 1;\n    } else {\n      uy &= <u64>-1 >> 12;\n      uy |= 1 << 52;\n    }\n    for (; ex > ey; ex--) {\n      i = ux - uy;\n      if (!(i >> 63)) {\n        if (!i) return 0 * x;\n        ux = i;\n      }\n      ux <<= 1;\n    }\n    i = ux - uy;\n    if (!(i >> 63)) {\n      if (!i) return 0 * x;\n      ux = i;\n    }\n    for (; !(ux >> 52); ux <<= 1) --ex;\n    if (ex > 0) {\n      ux -= 1 << 52;\n      ux |= <u64>ex << 52;\n    } else {\n      ux >>= -ex + 1;\n    }\n    ux |= <u64>sx << 63;\n    return reinterpret<f64>(ux);\n  }\n\n  export function rem(x: f64, y: f64): f64 { // see: musl/src/math/remquo.c\n    var ux = reinterpret<u64>(x);\n    var uy = reinterpret<u64>(y);\n    var ex = <i32>(ux >> 52 & 0x7FF);\n    var ey = <i32>(uy >> 52 & 0x7FF);\n    var sx = <i32>(ux >> 63);\n    var sy = <i32>(uy >> 63);\n    if (uy << 1 == 0 || isNaN(y) || ex == 0x7FF) return (x * y) / (x * y);\n    if (ux << 1 == 0) return x;\n    var uxi = ux;\n    var i: u64;\n    if (!ex) {\n      for (i = uxi << 12; i >> 63 == 0; ex--, i <<= 1) {}\n      uxi <<= -ex + 1;\n    } else {\n      uxi &= <u64>-1 >> 12;\n      uxi |= 1 << 52;\n    }\n    if (!ey) {\n      for (i = uy << 12; i >> 63 == 0; ey--, i <<= 1) {}\n      uy <<= -ey + 1;\n    } else {\n      uy &= <u64>-1 >> 12;\n      uy |= 1 << 52;\n    }\n    var q: u32 = 0;\n    do {\n      if (ex < ey) {\n        if (ex + 1 == ey) break; // goto end\n        return x;\n      }\n      for (; ex > ey; ex--) {\n        i = uxi - uy;\n        if (i >> 63 == 0) {\n          uxi = i;\n          ++q;\n        }\n        uxi <<= 1;\n        q <<= 1;\n      }\n      i = uxi - uy;\n      if (i >> 63 == 0) {\n        uxi = i;\n        ++q;\n      }\n      if (uxi == 0) ex = -60;\n      else for (; uxi >> 52 == 0; uxi <<= 1, ex--) {}\n      break;\n    } while (false);\n  // end:\n    if (ex > 0) {\n      uxi -= 1 << 52;\n      uxi |= <u64>ex << 52;\n    } else {\n      uxi >>= -ex + 1;\n    }\n    x = reinterpret<f64>(uxi);\n    if (sy) y = -y;\n    if (ex == ey || (ex + 1 == ey && (2.0 * x > y || (2.0 * x == y && <bool>(q & 1))))) {\n      x -= y;\n      ++q;\n    }\n    return sx ? -x : x;\n  }\n}\n\nfunction Rf(z: f32): f32 { // Rational approximation of (asin(x)-x)/x^3\n  const                    // see: musl/src/math/asinf.c and SUN COPYRIGHT NOTICE above\n    pS0 = reinterpret<f32>(0x3E2AAA75), //  1.6666586697e-01f\n    pS1 = reinterpret<f32>(0xBD2F13BA), // -4.2743422091e-02f\n    pS2 = reinterpret<f32>(0xBC0DD36B), // -8.6563630030e-03f\n    qS1 = reinterpret<f32>(0xBF34E5AE); // -7.0662963390e-01f\n  var p = z * (pS0 + z * (pS1 + z * pS2));\n  var q: f32 = 1 + z * qS1;\n  return p / q;\n}\n\nfunction expo2f(x: f32): f32 { // exp(x)/2 for x >= log(DBL_MAX)\n  const                        // see: musl/src/math/__expo2f.c\n    k    = <u32>235,\n    kln2 = reinterpret<f32>(0x4322E3BC); // 0x1.45c778p+7f\n  var scale = reinterpret<f32>(<u32>(0x7F + k / 2) << 23);\n  return NativeMathf.exp(x - kln2) * scale * scale;\n}\n\nexport namespace NativeMathf {\n\n  export const E       = <f32>NativeMath.E;\n  export const LN2     = <f32>NativeMath.LN2;\n  export const LN10    = <f32>NativeMath.LN10;\n  export const LOG2E   = <f32>NativeMath.LOG2E;\n  export const LOG10E  = <f32>NativeMath.LOG10E;\n  export const PI      = <f32>NativeMath.PI;\n  export const SQRT1_2 = <f32>NativeMath.SQRT1_2;\n  export const SQRT2   = <f32>NativeMath.SQRT2;\n\n  @inline\n  export function abs(x: f32): f32 {\n    return builtin_abs<f32>(x);\n  }\n\n  export function acos(x: f32): f32 { // see: musl/src/math/acosf.c and SUN COPYRIGHT NOTICE above\n    const\n      pio2_hi   = reinterpret<f32>(0x3FC90FDA), // 1.5707962513e+00f\n      pio2_lo   = reinterpret<f32>(0x33A22168), // 7.5497894159e-08f\n      Ox1p_120f = reinterpret<f32>(0x03800000);\n    var hx = reinterpret<u32>(x);\n    var ix = hx & 0x7FFFFFFF;\n    if (ix >= 0x3F800000) {\n      if (ix == 0x3F800000) {\n        if (hx >> 31) return 2 * pio2_hi + Ox1p_120f;\n        return 0;\n      }\n      return 0 / (x - x);\n    }\n    if (ix < 0x3F000000) {\n      if (ix <= 0x32800000) return pio2_hi + Ox1p_120f;\n      return pio2_hi - (x - (pio2_lo - x * Rf(x * x)));\n    }\n    var z: f32, w: f32, s: f32;\n    if (hx >> 31) {\n      z = (1 + x) * 0.5;\n      s = builtin_sqrt<f32>(z);\n      w = Rf(z) * s - pio2_lo;\n      return 2 * (pio2_hi - (s + w));\n    }\n    z = (1 - x) * 0.5;\n    s = builtin_sqrt<f32>(z);\n    hx = reinterpret<u32>(s);\n    var df = reinterpret<f32>(hx & 0xFFFFF000);\n    var c = (z - df * df) / (s + df);\n    w = Rf(z) * s + c;\n    return 2 * (df + w);\n  }\n\n  export function acosh(x: f32): f32 { // see: musl/src/math/acoshf.c\n    const s = reinterpret<f32>(0x3F317218); // 0.693147180559945309417232121458176568f\n    var u = reinterpret<u32>(x);\n    var a = u & 0x7FFFFFFF;\n    if (a < 0x3F800000 + (1 << 23)) return log1p(x - 1 + builtin_sqrt((x - 1) * (x - 1) + 2 * (x - 1)));\n    if (a < 0x3F800000 + (12 << 23)) return log(2 * x - 1 / (x + builtin_sqrt<f32>(x * x - 1)));\n    return log(x) + s;\n  }\n\n  export function asin(x: f32): f32 { // see: musl/src/math/asinf.c and SUN COPYRIGHT NOTICE above\n    const\n      pio2      = reinterpret<f32>(0x3FC90FDB), // 1.570796326794896558e+00f\n      Ox1p_120f = reinterpret<f32>(0x03800000);\n    var hx = reinterpret<u32>(x);\n    var ix = hx & 0x7FFFFFFF;\n    if (ix >= 0x3F800000) {\n      if (ix == 0x3F800000) return x * pio2 + Ox1p_120f;\n      return 0 / (x - x);\n    }\n    if (ix < 0x3F000000) {\n      if (ix < 0x39800000 && ix >= 0x00800000) return x;\n      return x + x * Rf(x * x);\n    }\n    var z: f32 = (1 - builtin_abs<f32>(x)) * 0.5;\n    var s = builtin_sqrt<f64>(z); // sic\n    x = <f32>(pio2 - 2 * (s + s * Rf(z)));\n    if (hx >> 31) return -x;\n    return x;\n  }\n\n  export function asinh(x: f32): f32 { // see: musl/src/math/asinhf.c\n    const c = reinterpret<f32>(0x3F317218); // 0.693147180559945309417232121458176568f\n    var u = reinterpret<u32>(x);\n    var i = u & 0x7FFFFFFF;\n    var s = <u32>(u >> 31);\n    u = i;\n    x = reinterpret<f32>(u);\n    if (i >= 0x3F800000 + (12 << 23)) x = log(x) + c;\n    else if (i >= 0x3F800000 + (1 << 23)) x = log(2 * x + 1 / (builtin_sqrt<f32>(x * x + 1) + x));\n    else if (i >= 0x3F800000 - (12 << 23)) x = log1p(x + x * x / (builtin_sqrt<f32>(x * x + 1) + 1));\n    return s ? -x : x;\n  }\n\n  export function atan(x: f32): f32 { // see: musl/src/math/atanf.c and SUN COPYRIGHT NOTICE above\n    const\n      atanhi0   = reinterpret<f32>(0x3EED6338), //  4.6364760399e-01f\n      atanhi1   = reinterpret<f32>(0x3F490FDA), //  7.8539812565e-01f\n      atanhi2   = reinterpret<f32>(0x3F7B985E), //  9.8279368877e-01f\n      atanhi3   = reinterpret<f32>(0x3FC90FDA), //  1.5707962513e+00f\n      atanlo0   = reinterpret<f32>(0x31AC3769), //  5.0121582440e-09f\n      atanlo1   = reinterpret<f32>(0x33222168), //  3.7748947079e-08f\n      atanlo2   = reinterpret<f32>(0x33140FB4), //  3.4473217170e-08f\n      atanlo3   = reinterpret<f32>(0x33A22168), //  7.5497894159e-08f\n      aT0       = reinterpret<f32>(0x3EAAAAA9), //  3.3333328366e-01f\n      aT1       = reinterpret<f32>(0xBE4CCA98), // -1.9999158382e-01f\n      aT2       = reinterpret<f32>(0x3E11F50D), //  1.4253635705e-01f\n      aT3       = reinterpret<f32>(0xBDDA1247), // -1.0648017377e-01f\n      aT4       = reinterpret<f32>(0x3D7CAC25), //  6.1687607318e-02f\n      Ox1p_120f = reinterpret<f32>(0x03800000);\n    var ix = reinterpret<u32>(x);\n    var sig = <u32>(ix >> 31);\n    ix &= 0x7FFFFFFF;\n    var z: f32;\n    if (ix >= 0x4C800000) {\n      if (isNaN(x)) return x;\n      z = atanhi3 + Ox1p_120f;\n      return sig ? -z : z;\n    }\n    var id: i32;\n    if (ix < 0x3EE00000) {\n      if (ix < 0x39800000) return x;\n      id = -1;\n    } else {\n      x = builtin_abs<f32>(x);\n      if (ix < 0x3F980000) {\n        if (ix < 0x3F300000) {\n          id = 0;\n          x = (2.0 * x - 1.0) / (2.0 + x);\n        } else {\n          id = 1;\n          x = (x - 1.0) / (x + 1.0);\n        }\n      } else {\n        if (ix < 0x401C0000) {\n          id = 2;\n          x = (x - 1.5) / (1.0 + 1.5 * x);\n        } else {\n          id = 3;\n          x = -1.0 / x;\n        }\n      }\n    }\n    z = x * x;\n    var w = z * z;\n    var s1 = z * (aT0 + w * (aT2 + w * aT4));\n    var s2 = w * (aT1 + w * aT3);\n    if (id < 0) return x - x * (s1 + s2);\n    switch (id) {\n      case 0: { z = atanhi0 - ((x * (s1 + s2) - atanlo0) - x); break; }\n      case 1: { z = atanhi1 - ((x * (s1 + s2) - atanlo1) - x); break; }\n      case 2: { z = atanhi2 - ((x * (s1 + s2) - atanlo2) - x); break; }\n      case 3: { z = atanhi3 - ((x * (s1 + s2) - atanlo3) - x); break; }\n      default: unreachable();\n    }\n    return sig ? -z : z;\n  }\n\n  export function atanh(x: f32): f32 { // see: musl/src/math/atanhf.c\n    var u = reinterpret<u32>(x);\n    var s = <u32>(u >> 31);\n    u &= 0x7FFFFFFF;\n    var y = reinterpret<f32>(u);\n    if (u < 0x3F800000 - (1 << 23)) {\n      if (u >= 0x3F800000 - (32 << 23)) y = 0.5 * log1p(2 * y + 2 * y * y / (1 - y));\n    } else y = 0.5 * log1p(2 * (y / (1 - y)));\n    return s ? -y : y;\n  }\n\n  export function atan2(y: f32, x: f32): f32 { // see: musl/src/math/atan2f.c and SUN COPYRIGHT NOTICE above\n    const\n      pi    = reinterpret<f32>(0x40490FDB), //  3.1415927410e+00f\n      pi_lo = reinterpret<f32>(0xB3BBBD2E); // -8.7422776573e-08f\n    if (isNaN(x) || isNaN(y)) return x + y;\n    var ix = reinterpret<u32>(x);\n    var iy = reinterpret<u32>(y);\n    if (ix == 0x3F800000) return atan(y);\n    var m = <u32>(((iy >> 31) & 1) | ((ix >> 30) & 2));\n    ix &= 0x7FFFFFFF;\n    iy &= 0x7FFFFFFF;\n    if (iy == 0) {\n      switch (m) {\n        case 0:\n        case 1: return y;\n        case 2: return  pi;\n        case 3: return -pi;\n      }\n    }\n    if (ix == 0) return m & 1 ? -pi / 2 : pi / 2;\n    if (ix == 0x7F800000) {\n      if (iy == 0x7F800000) {\n        switch (m) {\n          case 0: return  pi / 4;\n          case 1: return -pi / 4;\n          case 2: return  3 * pi / 4;\n          case 3: return -3 * pi / 4;\n        }\n      } else {\n        switch (m) {\n          case 0: return  0;\n          case 1: return -0;\n          case 2: return  pi;\n          case 3: return -pi;\n        }\n      }\n    }\n    if (ix + (26 << 23) < iy || iy == 0x7F800000) return m & 1 ? -pi / 2 : pi / 2;\n    var z: f32;\n    if ((m & 2) && iy + (26 << 23) < ix) z = 0.0;\n    else z = atan(builtin_abs<f32>(y / x));\n    switch (m) {\n      case 0: return  z;\n      case 1: return -z;\n      case 2: return pi - (z - pi_lo);\n      case 3: return (z - pi_lo) - pi;\n    }\n    unreachable();\n    return 0;\n  }\n\n  export function cbrt(x: f32): f32 { // see: musl/src/math/cbrtf.c and SUN COPYRIGHT NOTICE above\n    const\n      B1      = <u32>709958130,\n      B2      = <u32>642849266,\n      Ox1p24f = reinterpret<f32>(0x4B800000);\n    var u = reinterpret<u32>(x);\n    var hx = u & 0x7FFFFFFF;\n    if (hx >= 0x7F800000) return x + x;\n    if (hx < 0x00800000) {\n      if (hx == 0) return x;\n      u = reinterpret<u32>(x * Ox1p24f);\n      hx = u & 0x7FFFFFFF;\n      hx = hx / 3 + B2;\n    } else {\n      hx = hx / 3 + B1;\n    }\n    u &= 0x80000000;\n    u |= hx;\n    var T = <f64>reinterpret<f32>(u);\n    var r = T * T * T;\n    T = T * (<f64>x + x + r) / (x + r + r);\n    r = T * T * T;\n    T = T * (<f64>x + x + r) / (x + r + r);\n    return <f32>T;\n  }\n\n  @inline\n  export function ceil(x: f32): f32 {\n    return builtin_ceil<f32>(x);\n  }\n\n  @inline\n  export function clz32(x: f32): f32 {\n    return <f32>builtin_clz<i32>(<i32>x);\n  }\n\n  export function cos(x: f32): f32 { // TODO\n    unreachable();\n    return 0;\n  }\n\n  export function cosh(x: f32): f32 { // see: musl/src/math/coshf.c\n    var u = reinterpret<u32>(x);\n    u &= 0x7FFFFFFF;\n    x = reinterpret<f32>(u);\n    if (u < 0x3F317217) {\n      if (u < 0x3F800000 - (12 << 23)) return 1;\n      let t = expm1(x);\n      return 1 + t * t / (2 * (1 + t));\n    }\n    if (u < 0x42B17217) {\n      let t = exp(x);\n      return 0.5 * (t + 1 / t);\n    }\n    return expo2f(x);\n  }\n\n  @inline\n  export function floor(x: f32): f32 {\n    return builtin_floor<f32>(x);\n  }\n\n  export function exp(x: f32): f32 { // see: musl/src/math/expf.c and SUN COPYRIGHT NOTICE above\n    const\n      ln2hi    = reinterpret<f32>(0x3F317200), //  6.9314575195e-1f\n      ln2lo    = reinterpret<f32>(0x35BFBE8E), //  1.4286067653e-6f\n      invln2   = reinterpret<f32>(0x3FB8AA3B), //  1.4426950216e+0f\n      P1       = reinterpret<f32>(0x3E2AAA8F), //  1.6666625440e-1f\n      P2       = reinterpret<f32>(0xBB355215), // -2.7667332906e-3f\n      Ox1p127f = reinterpret<f32>(0x7F000000);\n    var hx = reinterpret<u32>(x);\n    var sign_ = <i32>(hx >> 31);\n    hx &= 0x7FFFFFFF;\n    if (hx >= 0x42AEAC50) {\n      if (hx >= 0x42B17218 && !sign_) {\n        x *= Ox1p127f;\n        return x;\n      }\n      if (sign_ && hx >= 0x42CFF1B5) return 0;\n    }\n    var hi: f32, lo: f32;\n    var k: i32;\n    if (hx > 0x3EB17218) {\n      if (hx > 0x3F851592) {\n        k = <i32>(invln2 * x + builtin_copysign<f32>(0.5, x));\n      } else {\n        k = 1 - sign_ - sign_;\n      }\n      hi = x - <f32>k * ln2hi;\n      lo = <f32>k * ln2lo;\n      x = hi - lo;\n    } else if (hx > 0x39000000) {\n      k = 0;\n      hi = x;\n      lo = 0;\n    } else {\n      return 1 + x;\n    }\n    var xx = x * x;\n    var c = x - xx * (P1 + xx * P2);\n    var y: f32 = 1 + (x * c / (2 - c) - lo + hi);\n    if (k == 0) return y;\n    return scalbn(y, k);\n  }\n\n  export function expm1(x: f32): f32 { // see: musl/src/math/expm1f.c and SUN COPYRIGHT NOTICE above\n    const\n      o_threshold = reinterpret<f32>(0x42B17180), //  8.8721679688e+01f\n      ln2_hi      = reinterpret<f32>(0x3F317180), //  6.9313812256e-01f\n      ln2_lo      = reinterpret<f32>(0x3717F7D1), //  9.0580006145e-06f\n      invln2      = reinterpret<f32>(0x3FB8AA3B), //  1.4426950216e+00f\n      Q1          = reinterpret<f32>(0xBD088868), // -3.3333212137e-02f\n      Q2          = reinterpret<f32>(0x3ACF3010), //  1.5807170421e-03f\n      Ox1p127f    = reinterpret<f32>(0x7F000000);\n    var u = reinterpret<u32>(x);\n    var hx = u & 0x7FFFFFFF;\n    var sign_ = <i32>(u >> 31);\n    if (hx >= 0x4195B844) {\n      if (hx > 0x7F800000) return x;\n      if (sign_) return -1;\n      if (x > o_threshold) {\n        x *= Ox1p127f;\n        return x;\n      }\n    }\n    var c: f32 = 0.0, t: f32, k: i32;\n    if (hx > 0x3EB17218) {\n      let hi: f32, lo: f32;\n      if (hx < 0x3F851592) {\n        if (!sign_) {\n          hi = x - ln2_hi;\n          lo = ln2_lo;\n          k =  1;\n        } else {\n          hi = x + ln2_hi;\n          lo = -ln2_lo;\n          k = -1;\n        }\n      } else {\n        k  = <i32>(invln2 * x + (sign_ ? -0.5 : 0.5));\n        t  = <f32>k;\n        hi = x - t * ln2_hi;\n        lo = t * ln2_lo;\n      }\n      x = hi - lo;\n      c = (hi - x) - lo;\n    } else if (hx < 0x33000000) {\n      return x;\n    } else k = 0;\n    var hfx: f32 = 0.5 * x;\n    var hxs: f32 = x * hfx;\n    var r1: f32 = 1.0 + hxs * (Q1 + hxs * Q2);\n    t  = 3.0 - r1 * hfx;\n    var e = hxs * ((r1 - t) / (6.0 - x * t));\n    if (k == 0) return x - (x * e - hxs);\n    e  = x * (e - c) - c;\n    e -= hxs;\n    if (k == -1) return 0.5 * (x - e) - 0.5;\n    if (k == 1) {\n      if (x < -0.25) return -2.0 * (e - (x + 0.5));\n      return 1.0 + 2.0 * (x - e);\n    }\n    u = (0x7F + k) << 23;\n    var twopk = reinterpret<f32>(u);\n    var y: f32;\n    if (k < 0 || k > 56) {\n      y = x - e + 1.0;\n      if (k == 128) y = y * 2.0 * Ox1p127f;\n      else y = y * twopk;\n      return y - 1.0;\n    }\n    u = (0x7F - k) << 23;\n    if (k < 23) y = (x - e + (1 - reinterpret<f32>(u))) * twopk;\n    else y = (x - (e + reinterpret<f32>(u)) + 1) * twopk;\n    return y;\n  }\n\n  @inline\n  export function fround(x: f32): f32 {\n    return x;\n  }\n\n  export function hypot(x: f32, y: f32): f32 { // see: musl/src/math/hypotf.c\n    const\n      Ox1p90f  = reinterpret<f32>(0x6C800000),\n      Ox1p_90f = reinterpret<f32>(0x12800000);\n    var ux = reinterpret<u32>(x);\n    var uy = reinterpret<u32>(y);\n    ux &= 0x7FFFFFFF;\n    uy &= 0x7FFFFFFF;\n    if (ux < uy) {\n      let ut = ux;\n      ux = uy;\n      uy = ut;\n    }\n    x = reinterpret<f32>(ux);\n    y = reinterpret<f32>(uy);\n    if (uy == 0xFF << 23) return y;\n    if (ux >= 0xFF << 23 || uy == 0 || ux - uy >= 25 << 23) return x + y;\n    var z: f32 = 1;\n    if (ux >= (0x7F + 60) << 23) {\n      z = Ox1p90f;\n      x *= Ox1p_90f;\n      y *= Ox1p_90f;\n    } else if (uy < (0x7F - 60) << 23) {\n      z = Ox1p_90f;\n      x *= Ox1p90f;\n      y *= Ox1p90f;\n    }\n    return z * builtin_sqrt<f32>(<f32>(<f64>x * x + <f64>y * y));\n  }\n\n  @inline\n  export function imul(x: f32, y: f32): f32 {\n    return <f32>(<i32>x * <i32>y);\n  }\n\n  export function log(x: f32): f32 { // see: musl/src/math/logf.c and SUN COPYRIGHT NOTICE above\n    const\n      ln2_hi  = reinterpret<f32>(0x3F317180), // 6.9313812256e-01f\n      ln2_lo  = reinterpret<f32>(0x3717F7D1), // 9.0580006145e-06f\n      Lg1     = reinterpret<f32>(0x3F2AAAAA), // 0xaaaaaa.0p-24f\n      Lg2     = reinterpret<f32>(0x3ECCCE13), // 0xccce13.0p-25f\n      Lg3     = reinterpret<f32>(0x3E91E9EE), // 0x91e9ee.0p-25f\n      Lg4     = reinterpret<f32>(0x3E789E26), // 0xf89e26.0p-26f\n      Ox1p25f = reinterpret<f32>(0x4C000000);\n    var u = reinterpret<u32>(x);\n    var k = 0;\n    if (u < 0x00800000 || <bool>(u >> 31)) {\n      if (u << 1 == 0) return -1 / (x * x);\n      if (u >> 31) return (x - x) / 0;\n      k -= 25;\n      x *= Ox1p25f;\n      u = reinterpret<u32>(x);\n    } else if (u >= 0x7F800000) return x;\n      else if (u == 0x3F800000) return 0;\n    u += 0x3F800000 - 0x3F3504F3;\n    k += <u32>(<i32>u >> 23) - 0x7F;\n    u = (u & 0x007FFFFF) + 0x3F3504F3;\n    x = reinterpret<f32>(u);\n    var f = x - 1.0;\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * Lg4);\n    var t2 = z * (Lg1 + w * Lg3);\n    var r = t2 + t1;\n    var hfsq = <f32>0.5 * f * f;\n    var dk = <f32>k;\n    return s * (hfsq + r) + dk * ln2_lo - hfsq + f + dk * ln2_hi;\n  }\n\n  export function log10(x: f32): f32 { // see: musl/src/math/log10f.c and SUN COPYRIGHT NOTICE above\n    const\n      ivln10hi  = reinterpret<f32>(0x3EDE6000), //  4.3432617188e-01f\n      ivln10lo  = reinterpret<f32>(0xB804EAD9), // -3.1689971365e-05f\n      log10_2hi = reinterpret<f32>(0x3E9A2080), //  3.0102920532e-01f\n      log10_2lo = reinterpret<f32>(0x355427DB), //  7.9034151668e-07f\n      Lg1       = reinterpret<f32>(0x3F2AAAAA), //  0xaaaaaa.0p-24f, 0.66666662693f\n      Lg2       = reinterpret<f32>(0x3ECCCE13), //  0xccce13.0p-25f, 0.40000972152f\n      Lg3       = reinterpret<f32>(0x3E91E9EE), //  0x91e9ee.0p-25f, 0.28498786688f\n      Lg4       = reinterpret<f32>(0x3E789E26), //  0xf89e26.0p-26f, 0.24279078841f\n      Ox1p25f   = reinterpret<f32>(0x4C000000);\n    var ix = reinterpret<u32>(x);\n    var k = 0;\n    if (ix < 0x00800000 || <bool>(ix >> 31)) {\n      if (ix << 1 == 0) return -1 / (x * x);\n      if (ix >> 31) return (x - x) / 0.0;\n      k -= 25;\n      x *= Ox1p25f;\n      ix = reinterpret<u32>(x);\n    } else if (ix >= 0x7F800000) return x;\n      else if (ix == 0x3F800000) return 0;\n    ix += 0x3F800000 - 0x3F3504F3;\n    k += <i32>(ix >> 23) - 0x7F;\n    ix = (ix & 0x007FFFFF) + 0x3F3504F3;\n    x = reinterpret<f32>(ix);\n    var f = x - 1.0;\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * Lg4);\n    var t2 = z * (Lg1 + w * Lg3);\n    var r = t2 + t1;\n    var hfsq: f32 = 0.5 * f * f;\n    var hi = f - hfsq;\n    ix = reinterpret<u32>(hi);\n    ix &= 0xFFFFF000;\n    hi = reinterpret<f32>(ix);\n    var lo = f - hi - hfsq + s * (hfsq + r);\n    var dk = <f32>k;\n    return dk * log10_2lo + (lo + hi) * ivln10lo + lo * ivln10hi + hi * ivln10hi + dk * log10_2hi;\n  }\n\n  export function log1p(x: f32): f32 { // see: musl/src/math/log1pf.c and SUN COPYRIGHT NOTICE above\n    const\n      ln2_hi = reinterpret<f32>(0x3F317180), // 6.9313812256e-01\n      ln2_lo = reinterpret<f32>(0x3717F7D1), // 9.0580006145e-06\n      Lg1    = reinterpret<f32>(0x3F2AAAAA), // 0xaaaaaa.0p-24f, 0.66666662693f\n      Lg2    = reinterpret<f32>(0x3ECCCE13), // 0xccce13.0p-25f, 0.40000972152f\n      Lg3    = reinterpret<f32>(0x3E91E9EE), // 0x91e9ee.0p-25f, 0.28498786688f\n      Lg4    = reinterpret<f32>(0x3E789E26); // 0xf89e26.0p-26f, 0.24279078841f\n    var ix = reinterpret<u32>(x);\n    var c: f32 = 0, f: f32 = 0;\n    var k: i32 = 1;\n    if (ix < 0x3ED413D0 || <bool>(ix >> 31)) {\n      if (ix >= 0xBF800000) {\n        if (x == -1) return x / 0.0;\n        return (x - x) / 0.0;\n      }\n      if (ix << 1 < 0x33800000 << 1) return x;\n      if (ix <= 0xBE95F619) {\n        k = 0;\n        c = 0;\n        f = x;\n      }\n    } else if (ix >= 0x7F800000) return x;\n    if (k) {\n      let uf: f32 = 1 + x;\n      let iu = reinterpret<u32>(uf);\n      iu += 0x3F800000 - 0x3F3504F3;\n      k = <i32>(iu >> 23) - 0x7F;\n      if (k < 25) {\n        c = k >= 2 ? 1 - (uf - x) : x - (uf - 1);\n        c /= uf;\n      } else c = 0;\n      iu = (iu & 0x007FFFFF) + 0x3F3504F3;\n      f = reinterpret<f32>(iu) - 1;\n    }\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * Lg4);\n    var t2 = z * (Lg1 + w * Lg3);\n    var r = t2 + t1;\n    var hfsq: f32 = 0.5 * f * f;\n    var dk = <f32>k;\n    return s * (hfsq + r) + (dk * ln2_lo + c) - hfsq + f + dk * ln2_hi;\n  }\n\n  export function log2(x: f32): f32 { // see: musl/src/math/log2f.c and SUN COPYRIGHT NOTICE above\n    const\n      ivln2hi = reinterpret<f32>(0x3FB8B000), //  1.4428710938e+00f\n      ivln2lo = reinterpret<f32>(0xB9389AD4), // -1.7605285393e-04\n      Lg1     = reinterpret<f32>(0x3F2AAAAA), //  0xaaaaaa.0p-24f, 0.66666662693f\n      Lg2     = reinterpret<f32>(0x3ECCCE13), //  0xccce13.0p-25f, 0.40000972152f\n      Lg3     = reinterpret<f32>(0x3E91E9EE), //  0x91e9ee.0p-25f, 0.28498786688f\n      Lg4     = reinterpret<f32>(0x3E789E26), //  0xf89e26.0p-26f, 0.24279078841f\n      Ox1p25f = reinterpret<f32>(0x4C000000);\n    var ix = reinterpret<u32>(x);\n    var k: i32 = 0;\n    if (ix < 0x00800000 || <bool>(ix >> 31)) {\n      if (ix << 1 == 0) return -1 / (x * x);\n      if (ix >> 31) return (x - x) / 0.0;\n      k -= 25;\n      x *= Ox1p25f;\n      ix = reinterpret<u32>(x);\n    } else if (ix >= 0x7F800000) return x;\n      else if (ix == 0x3F800000) return 0;\n    ix += 0x3F800000 - 0x3F3504F3;\n    k += <i32>(ix >> 23) - 0x7F;\n    ix = (ix & 0x007FFFFF) + 0x3F3504F3;\n    x = reinterpret<f32>(ix);\n    var f = x - 1.0;\n    var s = f / (2.0 + f);\n    var z = s * s;\n    var w = z * z;\n    var t1 = w * (Lg2 + w * Lg4);\n    var t2 = z * (Lg1 + w * Lg3);\n    var r = t2 + t1;\n    var hfsq: f32 = 0.5 * f * f;\n    var hi = f - hfsq;\n    var u = reinterpret<u32>(hi);\n    u &= 0xFFFFF000;\n    hi = reinterpret<f32>(u);\n    var lo: f32 = f - hi - hfsq + s * (hfsq + r);\n    var dk = <f32>k;\n    return (lo + hi) * ivln2lo + lo * ivln2hi + hi * ivln2hi + dk;\n  }\n\n  @inline\n  export function max(value1: f32, value2: f32): f32 {\n    return builtin_max<f32>(value1, value2);\n  }\n\n  @inline\n  export function min(value1: f32, value2: f32): f32 {\n    return builtin_min<f32>(value1, value2);\n  }\n\n  export function pow(x: f32, y: f32): f32 { // see: musl/src/math/powf.c and SUN COPYRIGHT NOTICE above\n    const\n      dp_h1   = reinterpret<f32>(0x3F15C000), //  5.84960938e-01f\n      dp_l1   = reinterpret<f32>(0x35D1CFDC), //  1.56322085e-06f\n      two24   = reinterpret<f32>(0x4B800000), //  16777216f\n      huge    = reinterpret<f32>(0x7149F2CA), //  1.0e+30f\n      tiny    = reinterpret<f32>(0x0DA24260), //  1.0e-30f\n      L1      = reinterpret<f32>(0x3F19999A), //  6.0000002384e-01f\n      L2      = reinterpret<f32>(0x3EDB6DB7), //  4.2857143283e-01f\n      L3      = reinterpret<f32>(0x3EAAAAAB), //  3.3333334327e-01f\n      L4      = reinterpret<f32>(0x3E8BA305), //  2.7272811532e-01f\n      L5      = reinterpret<f32>(0x3E6C3255), //  2.3066075146e-01f\n      L6      = reinterpret<f32>(0x3E53F142), //  2.0697501302e-01f\n      P1      = reinterpret<f32>(0x3E2AAAAB), //  1.6666667163e-01f\n      P2      = reinterpret<f32>(0xBB360B61), // -2.7777778450e-03f\n      P3      = reinterpret<f32>(0x388AB355), //  6.6137559770e-05f\n      P4      = reinterpret<f32>(0xB5DDEA0E), // -1.6533901999e-06f\n      P5      = reinterpret<f32>(0x3331BB4C), //  4.1381369442e-08f\n      lg2     = reinterpret<f32>(0x3F317218), //  6.9314718246e-01f\n      lg2_h   = reinterpret<f32>(0x3F317200), //  6.93145752e-01f\n      lg2_l   = reinterpret<f32>(0x35BFBE8C), //  1.42860654e-06f\n      ovt     = reinterpret<f32>(0x3338AA3C), //  4.2995665694e-08f\n      cp      = reinterpret<f32>(0x3F76384F), //  9.6179670095e-01\n      cp_h    = reinterpret<f32>(0x3F764000), //  9.6191406250e-01\n      cp_l    = reinterpret<f32>(0xB8F623C6), // -1.1736857402e-04\n      ivln2   = reinterpret<f32>(0x3FB8AA3B), //  1.4426950216e+00\n      ivln2_h = reinterpret<f32>(0x3FB8AA00), //  1.4426879883e+00\n      ivln2_l = reinterpret<f32>(0x36ECA570); //  7.0526075433e-06\n    var hx = reinterpret<i32>(x);\n    var hy = reinterpret<i32>(y);\n    var ix = hx & 0x7FFFFFFF;\n    var iy = hy & 0x7FFFFFFF;\n    if (iy == 0) return 1.0; // x**0 = 1, even if x is NaN\n    // if (hx == 0x3F800000) return 1.0; // C: 1**y = 1, even if y is NaN, JS: NaN\n    if (ix > 0x7F800000 || iy > 0x7F800000) return x + y; // NaN if either arg is NaN\n    var yisint  = 0, j: i32, k: i32;\n    if (hx < 0) {\n      if (iy >= 0x4B800000) yisint = 2;\n      else if (iy >= 0x3F800000) {\n        k = (iy >> 23) - 0x7F;\n        j = iy >> (23 - k);\n        if ((j << (23 - k)) == iy) yisint = 2 - (j & 1);\n      }\n    }\n    if (iy == 0x7F800000) { // y is +-inf\n      if (ix == 0x3F800000) return NaN; // C: (-1)**+-inf is 1, JS: NaN\n      else if (ix > 0x3F800000) return hy >= 0 ? y : 0.0; // (|x|>1)**+-inf = inf,0\n      else return hy >= 0 ? 0.0 : -y; // (|x|<1)**+-inf = 0,inf\n    }\n    if (iy == 0x3F800000) return hy >= 0 ? x : 1.0 / x;\n    if (hy == 0x40000000) return x * x;\n    if (hy == 0x3F000000) {\n      if (hx >= 0) return builtin_sqrt<f32>(x);\n    }\n    var ax = builtin_abs<f32>(x);\n    var z: f32;\n    if (ix == 0x7F800000 || ix == 0 || ix == 0x3F800000) {\n      z = ax;\n      if (hy < 0) z = 1.0 / z;\n      if (hx < 0) {\n        if (((ix - 0x3F800000) | yisint) == 0) z = (z - z) / (z - z);\n        else if (yisint == 1) z = -z;\n      }\n      return z;\n    }\n    var sn = <f32>1.0;\n    if (hx < 0) {\n      if (yisint == 0) return (x - x) / (x - x);\n      if (yisint == 1) sn = -1.0;\n    }\n    var t1: f32, t2: f32, r: f32, s: f32, t: f32, u: f32, v: f32, w: f32, p_h: f32, p_l: f32;\n    var n: i32, is: i32;\n    if (iy > 0x4D000000) {\n      if (ix < 0x3F7FFFF8) return hy < 0 ? sn * huge * huge : sn * tiny * tiny;\n      if (ix > 0x3F800007) return hy > 0 ? sn * huge * huge : sn * tiny * tiny;\n      t = ax - 1;\n      w = (t * t) * (0.5 - t * (0.333333333333 - t * 0.25));\n      u = ivln2_h * t;\n      v = t * ivln2_l - w * ivln2;\n      t1 = u + v;\n      is = reinterpret<i32>(t1);\n      t1 = reinterpret<f32>(is & 0xFFFFF000);\n      t2 = v - (t1 - u);\n    } else {\n      let s2: f32, s_h: f32, s_l: f32, t_h: f32, t_l: f32;\n      n = 0;\n      if (ix < 0x00800000) {\n        ax *= two24;\n        n -= 24;\n        ix = reinterpret<i32>(ax);\n      }\n      n += (ix >> 23) - 0x7F;\n      j = ix & 0x007FFFFF;\n      ix = j | 0x3F800000;\n      if (j <= 0x1CC471) k = 0;\n      else if (j < 0x5DB3D7) k = 1;\n      else {\n        k = 0;\n        n += 1;\n        ix -= 0x00800000;\n      }\n      ax = reinterpret<f32>(ix);\n      let bp = select<f32>(1.5, 1.0, k);\n      u = ax - bp;\n      v = 1.0 / (ax + bp);\n      s = u * v;\n      s_h = s;\n      is = reinterpret<u32>(s_h);\n      s_h = reinterpret<f32>(is & 0xFFFFF000);\n      is = ((ix >> 1) & 0xFFFFF000) | 0x20000000;\n      t_h = reinterpret<f32>(is + 0x00400000 + (k << 21));\n      t_l = ax - (t_h - bp);\n      s_l = v * ((u - s_h * t_h) - s_h * t_l);\n      s2 = s * s;\n      r = s2 * s2 * (L1 + s2 * (L2 + s2 * (L3 + s2 * (L4 + s2 * (L5 + s2 * L6)))));\n      r += s_l * (s_h + s);\n      s2 = s_h * s_h;\n      t_h = 3.0 + s2 + r;\n      is = reinterpret<u32>(t_h);\n      t_h = reinterpret<f32>(is & 0xFFFFF000);\n      t_l = r - ((t_h - 3.0) - s2);\n      u = s_h * t_h;\n      v = s_l * t_h + t_l * s;\n      p_h = u + v;\n      is = reinterpret<u32>(p_h);\n      p_h = reinterpret<f32>(is & 0xFFFFF000);\n      p_l = v - (p_h - u);\n      let z_h = cp_h * p_h;\n      let dp_l = select<f32>(dp_l1, 0.0, k);\n      let z_l = cp_l * p_h + p_l * cp + dp_l;\n      t = <f32>n;\n      let dp_h = select<f32>(dp_h1, 0.0, k);\n      t1 = (((z_h + z_l) + dp_h) + t);\n      is = reinterpret<u32>(t1);\n      t1 = reinterpret<f32>(is & 0xFFFFF000);\n      t2 = z_l - (((t1 - t) - dp_h) - z_h);\n    }\n    is = reinterpret<u32>(y);\n    var y1 = reinterpret<f32>(is & 0xFFFFF000);\n    p_l = (y - y1) * t1 + y * t2;\n    p_h = y1 * t1;\n    z = p_l + p_h;\n    j = reinterpret<u32>(z);\n    if (j > 0x43000000) {\n      return sn * huge * huge;\n    } else if (j == 0x43000000) {\n      if (p_l + ovt > z - p_h) return sn * huge * huge;\n    } else if ((j & 0x7FFFFFFF) > 0x43160000) {\n      return sn * tiny * tiny;\n    } else if (j == 0xC3160000) {\n      if (p_l <= z - p_h) return sn * tiny * tiny;\n    }\n    var i = j & 0x7FFFFFFF;\n    k = (i >> 23) - 0x7F;\n    n = 0;\n    if (i > 0x3F000000) {\n      n = j + (0x00800000 >> (k + 1));\n      k = ((n & 0x7FFFFFFF) >> 23) - 0x7F;\n      t = reinterpret<f32>(n & ~(0x007FFFFF >> k));\n      n = ((n & 0x007FFFFF) | 0x00800000) >> (23 - k);\n      if (j < 0) n = -n;\n      p_h -= t;\n    }\n    t = p_l + p_h;\n    is = reinterpret<u32>(t);\n    t = reinterpret<f32>(is & 0xFFFF8000);\n    u = t * lg2_h;\n    v = (p_l - (t - p_h)) * lg2 + t * lg2_l;\n    z = u + v;\n    w = v - (z - u);\n    t = z * z;\n    t1 = z - t * (P1 + t * (P2 + t * (P3 + t * (P4 + t * P5))));\n    r = (z * t1) / (t1 - 2.0) - (w + z * w);\n    z = 1.0 - (r - z);\n    j = reinterpret<u32>(z);\n    j += n << 23;\n    if ((j >> 23) <= 0) z = scalbn(z, n);\n    else z = reinterpret<f32>(j);\n    return sn * z;\n  }\n\n  @inline\n  export function seedRandom(value: i64): void {\n    NativeMath.seedRandom(value);\n  }\n\n  export function random(): f32 {\n    var f: f32; // FIXME: demoting from f64 to f32 might yield 1.0f\n    do f = <f32>NativeMath.random(); while (f == 1.0);\n    return f;\n  }\n\n  export function round(x: f32): f32 { // see: musl/src/math/roundf.c\n    const toint = <f32>1.0 / f32.EPSILON;\n    var ux = reinterpret<u32>(x);\n    var e = <i32>(ux >> 23 & 0xFF);\n    if (e >= 0x7F + 23) return x;\n    if (e < 0x7F - 1) return 0 * x;\n    var y: f32;\n    if (ux >> 31) {\n      // FIXME: JS always rounds fractional 0.5 towards +Infinity\n      // and there certainly is a smarter way to do this.\n      y = toint - x - toint + x;\n      if (y >= 0.5) y = x - y + 1;\n      else if (y < -0.5) y = x - y - 1;\n      else y = x - y;\n    } else {\n      y = x + toint - toint - x;\n      if (y > 0.5) y = y + x - 1;\n      else if (y <= -0.5) y = y + x + 1;\n      else y = y + x;\n    }\n    return y;\n  }\n\n  @inline\n  export function sign(x: f32): f32 {\n    // return x > 0 ? 1 : x < 0 ? -1 : x;\n    return builtin_abs<f32>(x) > 0 ? builtin_copysign<f32>(1, x) : x;\n  }\n\n  export function sin(x: f32): f32 { // TODO\n    unreachable();\n    return 0;\n  }\n\n  export function sinh(x: f32): f32 { // see: musl/src/math/sinhf.c\n    var u = reinterpret<u32>(x);\n    var h: f32 = 0.5;\n    if (u >> 31) h = -h;\n    u &= 0x7FFFFFFF;\n    var absx = reinterpret<f32>(u);\n    var t: f32;\n    if (u < 0x42B17217) {\n      t = expm1(absx);\n      if (u < 0x3F800000) {\n        if (u < 0x3F800000 - (12 << 23)) return x;\n        return h * (2 * t - t * t / (t + 1));\n      }\n      return h * (t + t / (t + 1));\n    }\n    t = 2 * h * expo2f(absx);\n    return t;\n  }\n\n  @inline\n  export function sqrt(x: f32): f32 {\n    return builtin_sqrt<f32>(x);\n  }\n\n  export function tan(x: f32): f32 { // TODO\n    unreachable();\n    return 0;\n  }\n\n  export function tanh(x: f32): f32 { // see: musl/src/math/tanhf.c\n    var u = reinterpret<u32>(x);\n    var sig = u >> 31;\n    u &= 0x7FFFFFFF;\n    x = reinterpret<f32>(u);\n    var t: f32;\n    if (u > 0x3F0C9F54) {\n      if (u > 0x41200000) t = 1 + 0 / x;\n      else {\n        t = expm1(2 * x);\n        t = 1 - 2 / (t + 2);\n      }\n    } else if (u > 0x3E82C578) {\n      t = expm1(2 * x);\n      t = t / (t + 2);\n    } else if (u >= 0x00800000) {\n      t = expm1(-2 * x);\n      t = -t / (t + 2);\n    } else t = x;\n    return sig ? -t : t;\n  }\n\n  @inline\n  export function trunc(x: f32): f32 {\n    return builtin_trunc<f32>(x);\n  }\n\n  /** @internal */\n  export function scalbn(x: f32, n: i32): f32 { // see: musl/src/math/scalbnf.c\n    const\n      Ox1p127f  = reinterpret<f32>(0x7F000000),\n      Ox1p_126f = reinterpret<f32>(0x00800000);\n    var y = x;\n    if (n > 127) {\n      y *= Ox1p127f;\n      n -= 127;\n      if (n > 127) {\n        y *= Ox1p127f;\n        n -= 127;\n        if (n > 127) n = 127;\n      }\n    } else if (n < -126) {\n      y *= Ox1p_126f;\n      n += 126;\n      if (n < -126) {\n        y *= Ox1p_126f;\n        n += 126;\n        if (n < -126) n = -126;\n      }\n    }\n    return y * reinterpret<f32>(<u32>(0x7F + n) << 23);\n  }\n\n  export function mod(x: f32, y: f32): f32 { // see: musl/src/math/fmodf.c\n    var ux = reinterpret<u32>(x);\n    var uy = reinterpret<u32>(y);\n    var ex = <i32>(ux >> 23 & 0xFF);\n    var ey = <i32>(uy >> 23 & 0xFF);\n    var sx = ux & 0x80000000;\n    if (uy << 1 == 0 || isNaN<f32>(y) || ex == 0xFF) return (x * y) / (x * y);\n    if (ux << 1 <= uy << 1) {\n      if (ux << 1 == uy << 1) return 0 * x;\n      return x;\n    }\n    var i: u32;\n    if (!ex) {\n      for (i = ux << 9; !(i >> 31); i <<= 1) --ex;\n      ux <<= -ex + 1;\n    } else {\n      ux &= <u32>-1 >> 9;\n      ux |= 1 << 23;\n    }\n    if (!ey) {\n      for (i = uy << 9; !(i >> 31); i <<= 1) --ey;\n      uy <<= -ey + 1;\n    } else {\n      uy &= <u32>-1 >> 9;\n      uy |= 1 << 23;\n    }\n    for (; ex > ey; --ex) {\n      i = ux - uy;\n      if (!(i >> 31)) {\n        if (!i) return 0 * x;\n        ux = i;\n      }\n      ux <<= 1;\n    }\n    i = ux - uy;\n    if (!(i >> 31)) {\n      if (!i) return 0 * x;\n      ux = i;\n    }\n    for (; !(ux >> 23); ux <<= 1) --ex;\n    if (ex > 0) {\n      ux -= 1 << 23;\n      ux |= <u32>ex << 23;\n    } else {\n      ux >>= -ex + 1;\n    }\n    ux |= sx;\n    return reinterpret<f32>(ux);\n  }\n\n  export function rem(x: f32, y: f32): f32 { // see: musl/src/math/remquof.c\n    var ux = reinterpret<u32>(x);\n    var uy = reinterpret<u32>(y);\n    var ex = <i32>(ux >> 23 & 0xFF);\n    var ey = <i32>(uy >> 23 & 0xFF);\n    var sx = <i32>(ux >> 31);\n    var sy = <i32>(uy >> 31);\n    var i: u32;\n    var uxi = ux;\n    if (uy << 1 == 0 || isNaN(y) || ex == 0xFF) return (x * y) / (x * y);\n    if (ux << 1 == 0) return x;\n    if (!ex) {\n      for (i = uxi << 9; i >> 31 == 0; ex--, i <<= 1) {}\n      uxi <<= -ex + 1;\n    } else {\n      uxi &= <u32>-1 >> 9;\n      uxi |= 1 << 23;\n    }\n    if (!ey) {\n      for (i = uy << 9; i >> 31 == 0; ey--, i <<= 1) {}\n      uy <<= -ey + 1;\n    } else {\n      uy &= <u32>-1 >> 9;\n      uy |= 1 << 23;\n    }\n    var q = 0;\n    do {\n      if (ex < ey) {\n        if (ex + 1 == ey) break; // goto end\n        return x;\n      }\n      for (; ex > ey; ex--) {\n        i = uxi - uy;\n        if (i >> 31 == 0) {\n          uxi = i;\n          q++;\n        }\n        uxi <<= 1;\n        q <<= 1;\n      }\n      i = uxi - uy;\n      if (i >> 31 == 0) {\n        uxi = i;\n        q++;\n      }\n      if (uxi == 0) ex = -30;\n      else for (; uxi >> 23 == 0; uxi <<= 1, ex--) {}\n      break;\n    } while (false);\n  // end\n    if (ex > 0) {\n      uxi -= 1 << 23;\n      uxi |= <u32>ex << 23;\n    } else {\n      uxi >>= -ex + 1;\n    }\n    x = reinterpret<f32>(uxi);\n    if (sy) y = -y;\n    if (ex == ey || (ex + 1 == ey && (<f32>2 * x > y || (<f32>2 * x == y && <bool>(q & 1))))) {\n      x -= y;\n      q++;\n    }\n    return sx ? -x : x;\n  }\n}\n\nexport function ipow32(x: i32, e: i32): i32 {\n  var out = 1;\n  if (ASC_SHRINK_LEVEL < 1) {\n    if (e < 0) return 0;\n\n    switch (e) {\n      case 0: return 1;\n      case 1: return x;\n      case 2: return x * x;\n    }\n\n    let log = 32 - clz(e);\n    if (log <= 5) {\n      // 32 = 2 ^ 5, so need only five cases.\n      // But some extra cases needs for properly overflowing\n      switch (log) {\n        case 5: {\n          if (e & 1) out *= x;\n          e >>= 1;\n          x *= x;\n        }\n        case 4: {\n          if (e & 1) out *= x;\n          e >>= 1;\n          x *= x;\n        }\n        case 3: {\n          if (e & 1) out *= x;\n          e >>= 1;\n          x *= x;\n        }\n        case 2: {\n          if (e & 1) out *= x;\n          e >>= 1;\n          x *= x;\n        }\n        case 1: {\n          if (e & 1) out *= x;\n        }\n      }\n      return out;\n    }\n  }\n\n  while (e > 0) {\n    if (e & 1) out *= x;\n    e >>= 1;\n    x *= x;\n  }\n  return out;\n}\n\nexport function ipow64(x: i64, e: i32): i64 {\n  var out: i64 = 1;\n  if (ASC_SHRINK_LEVEL < 1) {\n    if (e < 0) return 0;\n    switch (e) {\n      case 0: return 1;\n      case 1: return x;\n      case 2: return x * x;\n    }\n\n    let log = 32 - clz(e);\n    if (log <= 6) {\n      // 64 = 2 ^ 6, so need only six cases.\n      // But some extra cases needs for properly overflowing\n      switch (log) {\n        case 6: {\n          if (e & 1) out *= x;\n          e >>= 1;\n          x *= x;\n        }\n        case 5: {\n          if (e & 1) out *= x;\n          e >>= 1;\n          x *= x;\n        }\n        case 4: {\n          if (e & 1) out *= x;\n          e >>= 1;\n          x *= x;\n        }\n        case 3: {\n          if (e & 1) out *= x;\n          e >>= 1;\n          x *= x;\n        }\n        case 2: {\n          if (e & 1) out *= x;\n          e >>= 1;\n          x *= x;\n        }\n        case 1: {\n          if (e & 1) out *= x;\n        }\n      }\n      return out;\n    }\n  }\n\n  while (e > 0) {\n    if (e & 1) out *= x;\n    e >>= 1;\n    x *= x;\n  }\n  return out;\n}\n","/* tslint:disable */\n\n@builtin @inline export const NaN: f64 = 0 / 0;\n@builtin @inline export const Infinity: f64 = 1 / 0;\n\n@builtin export declare function isInteger<T>(value?: T): bool;\n@builtin export declare function isFloat<T>(value?: T): bool;\n@builtin export declare function isSigned<T>(value?: T): bool;\n@builtin export declare function isReference<T>(value?: T): bool;\n@builtin export declare function isString<T>(value?: T): bool;\n@builtin export declare function isArray<T>(value?: T): bool;\n@builtin export declare function isDefined(expression: void): bool;\n@builtin export declare function isConstant(expression: void): bool;\n@builtin export declare function isManaged<T>(value?: T): bool;\n@inline export function isNaN<T>(value: T): bool { return value != value; }\n@inline export function isFinite<T>(value: T): bool { return value - value == 0; }\n\n@builtin export declare function clz<T>(value: T): T;\n@builtin export declare function ctz<T>(value: T): T;\n@builtin export declare function popcnt<T>(value: T): T;\n@builtin export declare function rotl<T>(value: T, shift: T): T;\n@builtin export declare function rotr<T>(value: T, shift: T): T;\n@builtin export declare function abs<T>(value: T): T;\n@builtin export declare function max<T>(left: T, right: T): T;\n@builtin export declare function min<T>(left: T, right: T): T;\n@builtin export declare function ceil<T>(value: T): T;\n@builtin export declare function floor<T>(value: T): T;\n@builtin export declare function copysign<T>(left: T, right: T): T;\n@builtin export declare function nearest<T>(value: T): T;\n@builtin export declare function reinterpret<T>(value: void): T;\n@builtin export declare function sqrt<T>(value: T): T;\n@builtin export declare function trunc<T>(value: T): T;\n@builtin export declare function load<T>(offset: usize, constantOffset?: usize): T;\n@builtin export declare function store<T>(offset: usize, value: void, constantOffset?: usize): void;\n@builtin export declare function sizeof<T>(): usize; // | u32 / u64\n@builtin export declare function alignof<T>(): usize; // | u32 / u64\n@builtin export declare function offsetof<T>(fieldName?: string): usize; // | u32 / u64\n@builtin export declare function select<T>(ifTrue: T, ifFalse: T, condition: bool): T;\n@builtin export declare function unreachable(): void;\n@builtin export declare function changetype<T>(value: void): T;\n@builtin export declare function assert<T>(isTrueish: T, message?: string): T;\n@builtin export declare function unchecked<T>(expr: T): T;\n@builtin export declare function call_indirect<T>(target: void, ...args: void[]): T;\n\n@builtin export declare function i8(value: void): i8;\nexport namespace i8 {\n  export const MIN_VALUE: i8 = -128;\n  export const MAX_VALUE: i8 =  127;\n}\n\n@builtin export declare function i16(value: void): i16;\nexport namespace i16 {\n  export const MIN_VALUE: i16 = -32768;\n  export const MAX_VALUE: i16 =  32767;\n}\n\n@builtin export declare function i32(value: void): i32;\nexport namespace i32 {\n  export const MIN_VALUE: i32 = -2147483648;\n  export const MAX_VALUE: i32 =  2147483647;\n  @builtin export declare function clz(value: i32): i32;\n  @builtin export declare function ctz(value: i32): i32;\n  @builtin export declare function popcnt(value: i32): i32;\n  @builtin export declare function rotl(value: i32, shift: i32): i32;\n  @builtin export declare function rotr(value: i32, shift: i32): i32;\n  @builtin export declare function reinterpret_f32(value: f32): i32;\n  @builtin export declare function load8_s(offset: usize, constantOffset?: usize): i32;\n  @builtin export declare function load8_u(offset: usize, constantOffset?: usize): i32;\n  @builtin export declare function load16_s(offset: usize, constantOffset?: usize): i32;\n  @builtin export declare function load16_u(offset: usize, constantOffset?: usize): i32;\n  @builtin export declare function load(offset: usize, constantOffset?: usize): i32;\n  @builtin export declare function store8(offset: usize, value: i32, constantOffset?: usize): void;\n  @builtin export declare function store16(offset: usize, value: i32, constantOffset?: usize): void;\n  @builtin export declare function store(offset: usize, value: i32, constantOffset?: usize): void;\n}\n\n@builtin export declare function i64(value: void): i64;\nexport namespace i64 {\n  export const MIN_VALUE: i64 = -9223372036854775808;\n  export const MAX_VALUE: i64 =  9223372036854775807;\n  @builtin export declare function clz(value: i64): i64;\n  @builtin export declare function ctz(value: i64): i64;\n  @builtin export declare function load8_s(offset: usize, constantOffset?: usize): i64;\n  @builtin export declare function load8_u(offset: usize, constantOffset?: usize): u64;\n  @builtin export declare function load16_s(offset: usize, constantOffset?: usize): i64;\n  @builtin export declare function load16_u(offset: usize, constantOffset?: usize): u64;\n  @builtin export declare function load32_s(offset: usize, constantOffset?: usize): i64;\n  @builtin export declare function load32_u(offset: usize, constantOffset?: usize): u64;\n  @builtin export declare function load(offset: usize, constantOffset?: usize): i64;\n  @builtin export declare function popcnt(value: i64): i64;\n  @builtin export declare function rotl(value: i64, shift: i64): i64;\n  @builtin export declare function rotr(value: i64, shift: i64): i64;\n  @builtin export declare function reinterpret_f64(value: f64): i64;\n  @builtin export declare function store8(offset: usize, value: i64, constantOffset?: usize): void;\n  @builtin export declare function store16(offset: usize, value: i64, constantOffset?: usize): void;\n  @builtin export declare function store32(offset: usize, value: i64, constantOffset?: usize): void;\n  @builtin export declare function store(offset: usize, value: i64, constantOffset?: usize): void;\n}\n\n@builtin export declare function isize(value: void): isize;\nexport namespace isize {\n  export const MIN_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? -2147483648\n    : <isize>-9223372036854775808;\n  export const MAX_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? 2147483647\n    : <isize>9223372036854775807;\n}\n\n@builtin export declare function u8(value: void): u8;\nexport namespace u8 {\n  export const MIN_VALUE: u8 = 0;\n  export const MAX_VALUE: u8 = 255;\n}\n\n@builtin export declare function u16(value: void): u16;\nexport namespace u16 {\n  export const MIN_VALUE: u16 = 0;\n  export const MAX_VALUE: u16 = 65535;\n}\n\n@builtin export declare function u32(value: void): u32;\nexport namespace u32 {\n  export const MIN_VALUE: u32 = 0;\n  export const MAX_VALUE: u32 = 4294967295;\n}\n\n@builtin export declare function u64(value: void): u64;\nexport namespace u64 {\n  export const MIN_VALUE: u64 = 0;\n  export const MAX_VALUE: u64 = 18446744073709551615;\n}\n\n@builtin export declare function usize(value: void): usize;\nexport namespace usize {\n  export const MIN_VALUE: usize = 0;\n  export const MAX_VALUE: usize = sizeof<u32>() == sizeof<usize>()\n    ? 4294967295\n    : <usize>18446744073709551615;\n}\n\n@builtin export declare function bool(value: void): bool;\nexport namespace bool {\n  export const MIN_VALUE: bool = false;\n  export const MAX_VALUE: bool = true;\n}\n\n@builtin export declare function f32(value: void): f32;\nexport namespace f32 {\n  export const MIN_VALUE = reinterpret<f32>(0xFF7FFFFF); // -0x1.fffffep+127f\n  export const MAX_VALUE = reinterpret<f32>(0x7F7FFFFF); //  0x1.fffffep+127f\n  export const MIN_POSITIVE_VALUE = reinterpret<f32>(0x00800000); // 0x1p-126f\n  export const MIN_SAFE_INTEGER: f32 = -16777215;\n  export const MAX_SAFE_INTEGER: f32 =  16777215;\n  export const EPSILON = reinterpret<f32>(0x34000000); // 0x1p-23f\n  @builtin export declare function abs(value: f32): f32;\n  @builtin export declare function ceil(value: f32): f32;\n  @builtin export declare function copysign(x: f32, y: f32): f32;\n  @builtin export declare function floor(value: f32): f32;\n  @builtin export declare function load(offset: usize, constantOffset?: usize): f32;\n  @builtin export declare function max(left: f32, right: f32): f32;\n  @builtin export declare function min(left: f32, right: f32): f32;\n  @builtin export declare function nearest(value: f32): f32;\n  @builtin export declare function reinterpret_i32(value: i32): f32;\n  @builtin export declare function sqrt(value: f32): f32;\n  @builtin export declare function store(offset: usize, value: f32, constantOffset?: usize): void;\n  @builtin export declare function trunc(value: f32): f32;\n}\n\n@builtin export declare function f64(value: void): f64;\nexport namespace f64 {\n  export const MIN_VALUE = reinterpret<f64>(0xFFEFFFFFFFFFFFFF); // -0x1.fffffffffffffp+1023\n  export const MAX_VALUE = reinterpret<f64>(0x7FEFFFFFFFFFFFFF); //  0x1.fffffffffffffp+1023\n  export const MIN_POSITIVE_VALUE = reinterpret<f64>(0x0010000000000000); // 0x1p-1022\n  export const MIN_SAFE_INTEGER: f64 = -9007199254740991;\n  export const MAX_SAFE_INTEGER: f64 =  9007199254740991;\n  export const EPSILON = reinterpret<f64>(0x3CB0000000000000); // 0x1p-52\n  @builtin export declare function abs(value: f64): f64;\n  @builtin export declare function ceil(value: f64): f64;\n  @builtin export declare function copysign(x: f64, y: f64): f64;\n  @builtin export declare function floor(value: f64): f64;\n  @builtin export declare function load(offset: usize, constantOffset?: usize): f64;\n  @builtin export declare function max(left: f64, right: f64): f64;\n  @builtin export declare function min(left: f64, right: f64): f64;\n  @builtin export declare function nearest(value: f64): f64;\n  @builtin export declare function reinterpret_i64(value: i64): f64;\n  @builtin export declare function sqrt(value: f64): f64;\n  @builtin export declare function store(offset: usize, value: f64, constantOffset?: usize): void;\n  @builtin export declare function trunc(value: f64): f64;\n}\n\n@builtin export declare function start(): void;\n","import {\n  MAX_BLENGTH,\n  HEADER_SIZE,\n  allocateUnsafe,\n  reallocateUnsafe,\n  loadUnsafe,\n  storeUnsafe\n} from \"./internal/arraybuffer\";\n\nimport {\n  defaultComparator,\n  insertionSort,\n  weakHeapSort\n} from \"./internal/array\";\n\nexport class Array<T> {\n\n  /* @internal */ buffer_: ArrayBuffer;\n  /* @internal */ length_: i32;\n\n  constructor(length: i32 = 0) {\n    const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n    if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\n    var byteLength = length << alignof<T>();\n    var buffer = allocateUnsafe(byteLength);\n    this.buffer_ = buffer;\n    this.length_ = length;\n    memory.fill(\n      changetype<usize>(buffer) + HEADER_SIZE,\n      0,\n      <usize>byteLength\n    );\n  }\n\n  @inline\n  get length(): i32 {\n    return this.length_;\n  }\n\n  set length(length: i32) {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    if (<u32>length > <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, length << alignof<T>());\n      this.buffer_ = buffer;\n    }\n    this.length_ = length;\n  }\n\n  every(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < toIndex && index < this.length_; ++index) {\n      if (!callbackfn(loadUnsafe<T,T>(buffer, index), index, this)) return false;\n    }\n    return true;\n  }\n\n  findIndex(predicate: (element: T, index: i32, array: Array<T>) => bool): i32 {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < toIndex && index < this.length_; ++index) {\n      if (predicate(loadUnsafe<T,T>(buffer, index), index, this)) return index;\n    }\n    return -1;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): T {\n    var buffer = this.buffer_;\n    return <u32>index < <u32>(buffer.byteLength >>> alignof<T>())\n      ? loadUnsafe<T,T>(buffer, index)\n      : <T>unreachable();\n  }\n\n  @operator(\"{}\")\n  private __unchecked_get(index: i32): T {\n    return loadUnsafe<T,T>(this.buffer_, index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: T): void {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    if (<u32>index >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>index >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, (index + 1) << alignof<T>());\n      this.buffer_ = buffer;\n      this.length_ = index + 1;\n    }\n    storeUnsafe<T,T>(buffer, index, value);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\n  }\n\n  @operator(\"{}=\")\n  private __unchecked_set(index: i32, value: T): void {\n    storeUnsafe<T,T>(this.buffer_, index, value);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\n  }\n\n  fill(value: T, start: i32 = 0, end: i32 = i32.MAX_VALUE): this {\n    var buffer = this.buffer_;\n    var len    = this.length_;\n    start = start < 0 ? max(len + start, 0) : min(start, len);\n    end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n    if (sizeof<T>() == 1) {\n      memory.fill(\n        changetype<usize>(buffer) + start + HEADER_SIZE,\n        <u8>value,\n        <usize>(end - start)\n      );\n    } else {\n      for (; start < end; ++start) {\n        storeUnsafe<T,T>(buffer, start, value);\n      }\n    }\n    return this;\n  }\n\n  includes(searchElement: T, fromIndex: i32 = 0): bool {\n    var length = this.length_;\n    if (length == 0 || fromIndex >= length) return false;\n    if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\n    var buffer = this.buffer_;\n    while (fromIndex < length) {\n      if (loadUnsafe<T,T>(buffer, fromIndex) == searchElement) return true;\n      ++fromIndex;\n    }\n    return false;\n  }\n\n  indexOf(searchElement: T, fromIndex: i32 = 0): i32 {\n    var length = this.length_;\n    if (length == 0 || fromIndex >= length) return -1;\n    if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\n    var buffer = this.buffer_;\n    while (fromIndex < length) {\n      if (loadUnsafe<T,T>(buffer, fromIndex) == searchElement) return fromIndex;\n      ++fromIndex;\n    }\n    return -1;\n  }\n\n  lastIndexOf(searchElement: T, fromIndex: i32 = this.length_): i32 {\n    var length = this.length_;\n    if (length == 0) return -1;\n    if (fromIndex < 0) fromIndex = length + fromIndex; // no need to clamp\n    else if (fromIndex >= length) fromIndex = length - 1;\n    var buffer = this.buffer_;\n    while (fromIndex >= 0) {                           // ^\n      if (loadUnsafe<T,T>(buffer, fromIndex) == searchElement) return fromIndex;\n      --fromIndex;\n    }\n    return -1;\n  }\n\n  push(element: T): i32 {\n    var length = this.length_;\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    var newLength = length + 1; // safe only if length is checked\n    if (<u32>length >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\n      this.buffer_ = buffer;\n    }\n    this.length_ = newLength;\n    storeUnsafe<T,T>(buffer, length, element);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\n    return newLength;\n  }\n\n  pop(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(\"Array is empty\");\n    var element = loadUnsafe<T,T>(this.buffer_, --length);\n    this.length_ = length;\n    return element;\n  }\n\n  forEach(callbackfn: (value: T, index: i32, array: Array<T>) => void): void {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < toIndex && index < this.length_; ++index) {\n      callbackfn(loadUnsafe<T,T>(buffer, index), index, this);\n    }\n  }\n\n  map<U>(callbackfn: (value: T, index: i32, array: Array<T>) => U): Array<U> {\n    var buffer = this.buffer_;\n    var length = this.length_;\n    var result = new Array<U>(length);\n    var resultBuffer = result.buffer_;\n    for (let index = 0; index < length && index < this.length_; ++index) {\n      storeUnsafe<U,U>(resultBuffer, index, callbackfn(loadUnsafe<T,T>(buffer, index), index, this));\n    }\n    return result;\n  }\n\n  filter(callbackfn: (value: T, index: i32, array: Array<T>) => bool): Array<T> {\n    var buffer = this.buffer_;\n    var length = this.length_;\n    var result = new Array<T>();\n    for (let index = 0; index < length && index < this.length_; ++index) {\n      let value = loadUnsafe<T,T>(buffer, index);\n      if (callbackfn(value, index, this)) result.push(value);\n    }\n    return result;\n  }\n\n  reduce<U>(\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < toIndex && index < this.length_; ++index) {\n      accum = callbackfn(accum, loadUnsafe<T,T>(buffer, index), index, this);\n    }\n    return accum;\n  }\n\n  reduceRight<U>(\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    var buffer = this.buffer_;\n    for (let index: i32 = this.length_ - 1; index >= 0; --index) {\n      accum = callbackfn(accum, loadUnsafe<T,T>(buffer, index), index, this);\n    }\n    return accum;\n  }\n\n  shift(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(\"Array is empty\");\n    var buffer = this.buffer_;\n    var element = loadUnsafe<T,T>(buffer, 0);\n    var lastIndex = length - 1;\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE,\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\n      <usize>lastIndex << alignof<T>()\n    );\n    storeUnsafe<T,T>(buffer, lastIndex, <T>null);\n    this.length_ = lastIndex;\n    return element;\n  }\n\n  some(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < toIndex && index < this.length_; ++index) {\n      if (callbackfn(loadUnsafe<T,T>(buffer, index), index, this)) return true;\n    }\n    return false;\n  }\n\n  unshift(element: T): i32 {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    var length = this.length_;\n    var newLength = length + 1; // safe only if length is checked\n    if (<u32>length >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\n      capacity = buffer.byteLength >>> alignof<T>();\n      this.buffer_ = buffer;\n    }\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\n      changetype<usize>(buffer) + HEADER_SIZE,\n      <usize>(capacity - 1) << alignof<T>()\n    );\n    storeUnsafe<T,T>(buffer, 0, element);\n    this.length_ = newLength;\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\n    return newLength;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Array<T> {\n    var length = this.length_;\n    if (begin < 0) begin = max(length + begin, 0);\n    else if (begin > length) begin = length;\n    if (end < 0) end = length + end; // no need to clamp\n    else if (end > length) end = length;\n    if (end < begin) end = begin;    // ^\n    var newLength = end - begin;\n    assert(newLength >= 0);\n    var sliced = new Array<T>(newLength);\n    if (newLength) {\n      memory.copy(\n        changetype<usize>(sliced.buffer_) + HEADER_SIZE,\n        changetype<usize>(this.buffer_) + HEADER_SIZE + (<usize>begin << alignof<T>()),\n        <usize>newLength << alignof<T>()\n      );\n    }\n    return sliced;\n  }\n\n  splice(start: i32, deleteCount: i32 = i32.MAX_VALUE): void {\n    if (deleteCount < 1) return;\n    var length = this.length_;\n    if (start < 0) start = max(length + start, 0);\n    if (start >= length) return;\n    deleteCount = min(deleteCount, length - start);\n    var buffer = this.buffer_;\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE + (<usize>start << alignof<T>()),\n      changetype<usize>(buffer) + HEADER_SIZE + (<usize>(start + deleteCount) << alignof<T>()),\n      <usize>deleteCount << alignof<T>()\n    );\n    this.length_ = length - deleteCount;\n  }\n\n  reverse(): Array<T> {\n    var buffer = this.buffer_;\n    for (let front = 0, back = this.length_ - 1; front < back; ++front, --back) {\n      let temp = loadUnsafe<T,T>(buffer, front);\n      storeUnsafe<T,T>(buffer, front, loadUnsafe<T,T>(buffer, back));\n      storeUnsafe<T,T>(buffer, back, temp);\n    }\n    return this;\n  }\n\n  sort(comparator: (a: T, b: T) => i32 = defaultComparator<T>()): this {\n    // TODO remove this when flow will allow trackcing null\n    assert(comparator); // The comparison function must be a function\n\n    var length = this.length_;\n    if (length <= 1) return this;\n    var buffer = this.buffer_;\n    if (length == 2) {\n      let a = loadUnsafe<T,T>(buffer, 1); // a = arr[1]\n      let b = loadUnsafe<T,T>(buffer, 0); // b = arr[0]\n      if (comparator(a, b) < 0) {\n        storeUnsafe<T,T>(buffer, 1, b);   // arr[1] = b;\n        storeUnsafe<T,T>(buffer, 0, a);   // arr[0] = a;\n      }\n      return this;\n    }\n\n    if (isReference<T>()) {\n      // TODO replace this to faster stable sort (TimSort) when it implemented\n      insertionSort<T>(buffer, 0, length, comparator);\n      return this;\n    } else {\n      if (length < 256) {\n        insertionSort<T>(buffer, 0, length, comparator);\n      } else {\n        weakHeapSort<T>(buffer, 0, length, comparator);\n      }\n      return this;\n    }\n  }\n\n  private __gc(): void {\n    var buffer = this.buffer_;\n    __gc_mark(changetype<usize>(buffer)); // tslint:disable-line\n    if (isManaged<T>()) {\n      let offset: usize = 0;\n      let end = <usize>this.length_ << alignof<usize>();\n      while (offset < end) {\n        __gc_mark(load<usize>(changetype<usize>(buffer) + offset, HEADER_SIZE)); // tslint:disable-line\n        offset += sizeof<usize>();\n      }\n    }\n  }\n}\n","import { AL_MASK, MAX_SIZE_32 } from \"./allocator\";\n\n/** Size of an ArrayBuffer header. */\nexport const HEADER_SIZE: usize = (offsetof<ArrayBuffer>() + AL_MASK) & ~AL_MASK;\n/** Maximum byte length of an ArrayBuffer. */\nexport const MAX_BLENGTH: i32 = <i32>MAX_SIZE_32 - HEADER_SIZE;\n\nfunction computeSize(byteLength: i32): usize {\n  // round up to power of 2, with HEADER_SIZE=8:\n  // 0            -> 2^3  = 8\n  // 1..8         -> 2^4  = 16\n  // 9..24        -> 2^5  = 32\n  // ...\n  // MAX_LENGTH   -> 2^30 = 0x40000000 (MAX_SIZE_32)\n  return <usize>1 << <usize>(<u32>32 - clz<u32>(byteLength + HEADER_SIZE - 1));\n}\n\n// Low-level utility\n\nfunction __gc(ref: usize): void {}\n\nexport function allocateUnsafe(byteLength: i32): ArrayBuffer {\n  assert(<u32>byteLength <= <u32>MAX_BLENGTH);\n  var buffer: usize;\n  if (isManaged<ArrayBuffer>()) {\n    buffer = __gc_allocate(computeSize(byteLength), __gc); // tslint:disable-line\n  } else {\n    buffer = memory.allocate(computeSize(byteLength));\n  }\n  store<i32>(buffer, byteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n  return changetype<ArrayBuffer>(buffer);\n}\n\nexport function reallocateUnsafe(buffer: ArrayBuffer, newByteLength: i32): ArrayBuffer {\n  var oldByteLength = buffer.byteLength;\n  if (newByteLength > oldByteLength) {\n    assert(newByteLength <= MAX_BLENGTH);\n    if (newByteLength <= <i32>(computeSize(oldByteLength) - HEADER_SIZE)) { // fast path: zero out additional space\n      store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n      memory.fill(\n        changetype<usize>(buffer) + HEADER_SIZE + <usize>oldByteLength,\n        0,\n        <usize>(newByteLength - oldByteLength)\n      );\n    } else { // slow path: copy to new buffer\n      let newBuffer = allocateUnsafe(newByteLength);\n      memory.copy(\n        changetype<usize>(newBuffer) + HEADER_SIZE,\n        changetype<usize>(buffer) + HEADER_SIZE,\n        <usize>oldByteLength\n      );\n      memory.fill(\n        changetype<usize>(newBuffer) + HEADER_SIZE + <usize>oldByteLength,\n        0,\n        <usize>(newByteLength - oldByteLength)\n      );\n      return newBuffer;\n    }\n  } else if (newByteLength < oldByteLength) { // fast path: override size\n    // TBD: worth to copy and release if size is significantly less than before?\n    assert(newByteLength >= 0);\n    store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n  }\n  return buffer;\n}\n\n@inline export function loadUnsafe<T,V>(buffer: ArrayBuffer, index: i32): V {\n  return <V>load<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()), HEADER_SIZE);\n}\n\n@inline export function storeUnsafe<T,V>(buffer: ArrayBuffer, index: i32, value: V): void {\n  store<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()), value, HEADER_SIZE);\n}\n\n@inline export function loadUnsafeWithOffset<T,V>(buffer: ArrayBuffer, index: i32, byteOffset: i32): V {\n  return <V>load<T>(changetype<usize>(buffer) + <usize>byteOffset + (<usize>index << alignof<T>()), HEADER_SIZE);\n}\n\n@inline export function storeUnsafeWithOffset<T,V>(buffer: ArrayBuffer, index: i32, value: V, byteOffset: i32): void {\n  store<T>(changetype<usize>(buffer) + <usize>byteOffset + (<usize>index << alignof<T>()), value, HEADER_SIZE);\n}\n"]}